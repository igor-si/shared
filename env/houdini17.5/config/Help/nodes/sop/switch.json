{"body": [{"indent": 0, "text": ["Switch"], "type": "title", "extent": [88, 99], "level": 0}, {"indent": 0, "type": "summary", "extent": [99, 187], "text": ["Switches between network branches based on an expression\nor keyframe animation."]}, {"indent": 0, "type": "para", "extent": [187, 388], "text": ["This node passes the input specified in the ", {"text": ["Select input"], "type": "ui"}, " parameter to the output. The input numbering starts at 0. You can control the parameter with an\n", {"text": ["expression"], "fullpath": "/expressions/index", "scheme": null, "type": "link", "value": "/expressions/"}, "  or animate it."]}, {"indent": 0, "type": "para", "extent": [388, 810], "text": ["For example, you could use the expression ", {"text": ["$F - 1"], "type": "code"}, " to switch to the\nfirst input at frame 1, the second input at frame 2, and so on. Use the\nexpression ", {"text": ["($F >= 5)"], "type": "code"}, " to use the first input for the first four frames,\nand the second input afterward (boolean operators such as ", {"text": [">="], "type": "code"}, " return\n", {"text": ["0"], "type": "code"}, " for false and ", {"text": ["1"], "type": "code"}, " for true, so the switch will select input 0 when\nthe expression is false and input 1 when the expression is true)."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [815, 1022], "text": ["Often, you can use a Switch in a network that could potentially have\n    errors to bypass the failing nodes. One way to do this is to use the\n    following expression in the ", {"text": ["Select Input"], "type": "ui"}, " parameter:"]}, {"lang": "exp", "indent": 4, "type": "pre", "extent": [1022, 1138], "text": ["\n    if (strmatch(\"*Error:*\", run(\"opinfo \" + opfullpath(\"../\" + opinput(\".\", 1)))), 0, 1)\n    "]}, {"indent": 4, "type": "para", "extent": [1138, 1284], "text": ["With this expression, the switch will use the ", {"text": ["second"], "type": "em"}, " input, unless\n    it has an error, in which case it will switch to the ", {"text": ["first"], "type": "em"}, " input."]}, {"indent": 4, "type": "para", "extent": [1284, 1694], "text": ["The expression gets the operator info string (using ", {"text": ["run"], "value": "/expressions/run", "fallback_text": "run()", "fullpath": "/expressions/run", "scheme": "Exp", "type": "link"}, "\n    expression function to call the ", {"text": ["opinfo"], "value": "/commands/opinfo", "fallback_text": "opinfo", "fullpath": "/commands/opinfo", "scheme": "Cmd", "type": "link"}, " HScript command)\n    of the second input (", {"text": ["opinput(\".\", 1)"], "type": "code"}, ". The inputs are zero-based,\n    so ", {"text": ["1"], "type": "code"}, " refers to the second input). If ", {"text": ["strmatch"], "value": "/expressions/strmatch", "fallback_text": "strmatch()", "fullpath": "/expressions/strmatch", "scheme": "Exp", "type": "link"}, " finds\n    an error string, the ", {"text": ["if"], "value": "/expressions/if", "fallback_text": "if()", "fullpath": "/expressions/if", "scheme": "Exp", "type": "link"}, " function returns 0 (use first\n    input), otherwise it returns 1 (use second input)."]}, {"indent": 4, "type": "para", "extent": [1694, 1931], "text": ["You can also use the following expression when working with SOPs that generate warnings instead of errors. For example, when an Object Merge is the second input to a switch which is not loading any geometry and generates a warning:"]}, {"lang": "exp", "indent": 4, "type": "pre", "extent": [1931, 2049], "text": ["\n    if (strmatch(\"*Warning:*\", run(\"opinfo \" + opfullpath(\"../\" + opinput(\".\", 1)))), 0, 1)\n    "]}], "indent": 0, "role": "item", "type": "tip", "extent": [810, 815]}], "container": true, "role": "item_group", "type": "tip_group"}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [2109, 2264], "text": ["The input number (starting at 0) to pass to the output. You can\n        use an expression to control this or animate the parameter\n        value."]}], "indent": 4, "text": ["Select Input"], "role": "item", "attrs": {"channels": "/input"}, "extent": [2064, 2082], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [2049, 2064], "container": true, "type": "parameters_section", "id": "parameters"}], "summary": ["Switches between network branches based on an expression\nor keyframe animation."], "type": "root", "attrs": {"version": null, "tags": "util, network", "namespace": null, "internal": "switch", "context": "sop", "type": "node", "icon": "COMMON/switch"}, "title": ["Switch"]}