{"body": [{"indent": 0, "text": ["Volume VOP"], "type": "title", "extent": [92, 107], "level": 0}, {"indent": 0, "type": "summary", "extent": [107, 156], "text": ["Runs CVEX on a set of volume primitives."]}, {"indent": 0, "type": "para", "extent": [156, 381], "text": ["The Volume VOP operation runs CVEX over a set of volume\nprimitives.  The CVEX shader can be defined as a .vfl file, a Shop, or\nby building a CVEX VOP network inside this node.  The last is the most\nstraightforward approach."]}, {"indent": 0, "type": "para", "extent": [381, 908], "text": ["Binding to the CVEX script controls what values are passed to which\nparameters of the script.  The default AutoBind will look at the name\nattribute of the volumes to determine which parameter they should\noverride.  If that parameter is marked as exported in the CVEX script,\nthe volume will be written to.  Otherwise, the volume is just read to\nget the parameter\u2019s values.  If a name attribute is not present, the\nfirst volume is bound to the \"density\" parameter which is provided in\nthe default output and global parameters."]}, {"indent": 0, "type": "para", "extent": [908, 1181], "text": ["The CVEX script is applied once for each exported volume primitive.\nLocally defined ", {"text": ["ix"], "type": "code"}, ", ", {"text": ["iy"], "type": "code"}, ", ", {"text": ["iz"], "type": "code"}, ", ", {"text": ["resx"], "type": "code"}, ", ", {"text": ["resy"], "type": "code"}, ", ", {"text": ["resz"], "type": "code"}, ", ", {"text": ["orig"], "type": "code"}, ", and ", {"text": ["P"], "type": "code"}, " bindings are\ncreated that refer to the index, resolution, center, and current voxel\nposition of the currently exported primitive."]}, {"indent": 0, "type": "para", "extent": [1181, 1392], "text": ["The parameters list starts with parameters created by the CVEX\nscript\u2019s parameters.  If the parameter is meant only to be bound to a\nvolume, it can be hidden by setting the invisible flag on the VOP\nparameter."]}, {"body": [{"indent": 0, "type": "para", "extent": [1436, 1785], "text": ["You can only have one volume per attribute, which means you need three volumes to represent r, g, and b in the render. Then you can process each volume individually, all together as a single Volume VOP network, or use the ", {"text": ["Volume Mix SOP"], "fullpath": "/nodes/sop/volumemix", "scheme": "Node", "type": "link", "value": "/nodes/sop/volumemix"}, " in user mode and modify ", {"text": ["$V"], "type": "code"}, " which is the voxel value at the current sample voxel point."]}, {"indent": 0, "type": "para", "extent": [1785, 2090], "text": ["Pay close attention to what is happening in the Volume VOP. You index in to the various volumes via a ", {"text": ["Bind VOP"], "fullpath": "/nodes/vop/bind", "scheme": "Node", "type": "link", "value": "/nodes/vop/bind"}, " set up to the exact same name as the name attribute present with the associated volume primitive. To export it back out, you need the same named parameter in a Bind Export VOP."]}], "indent": 0, "level": 2, "text": ["Adding user-defined colors to volumes"], "extent": [1392, 1436], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"body": [{"indent": 16, "type": "para", "extent": [2140, 2351], "text": ["Where to get the CVEX script from.  Myself will refer to the VOP network built inside this node.  SHOP will use the ", {"text": ["Shop Path"], "type": "ui"}, " and ", {"text": ["Script"], "type": "ui"}, " will load the .vex file specified in the script."]}], "indent": 8, "text": ["Vex Source"], "role": "item", "extent": [2119, 2140], "type": "parameters_item"}, {"body": [{"indent": 16, "type": "para", "extent": [2370, 2411], "text": ["The CVEX Shop to apply."]}, {"indent": 16, "type": "para", "extent": [2411, 2506], "text": ["This can also point to any node that contains a CVEX VOP Network."]}, {"body": [{"body": [{"indent": 24, "type": "para", "extent": [2528, 2595], "text": ["Referenced nodes parameters will be used."]}], "indent": 16, "role": "item", "type": "note", "extent": [2506, 2528]}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 8, "text": ["Shop Path"], "role": "item", "extent": [2351, 2370], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [2611, 2650], "text": ["The CVEX script to apply."]}], "indent": 8, "text": ["Script"], "role": "item", "extent": [2595, 2611], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [2681, 2803], "text": ["When in script mode, this reloads any .vex files to\n            account for updates made outside of Houdini."]}], "indent": 8, "text": ["Re-load VEX Functions"], "role": "item", "extent": [2650, 2681], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [2821, 2912], "text": ["The command line used by VOPs to compile the inside of\n            this node."]}], "indent": 8, "text": ["Compiler"], "role": "item", "extent": [2803, 2821], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [2935, 2988], "text": ["Trigger a recompile of the VOP network."]}], "indent": 8, "text": ["Force Compile"], "role": "item", "extent": [2912, 2935], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [3018, 3328], "text": ["VEX functions like ", {"text": ["ch()"], "type": "code"}, " usually evaluate with respect to this node.\n            Providing a path here can override where the path search starts\n            from.  This is useful for embedding in a digital asset where you\n            would like the top level digital asset to be the search root."]}], "indent": 8, "text": ["Evaluation Node Path"], "role": "item", "extent": [2988, 3018], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [3355, 3622], "text": ["This pattern can be used to override\n            the export option on the VEX shader to avoid writing to \n            certain volumes.  The pattern matches the VEX parameter, not\n            the bound volume.  The volume will still be bound for reading."]}], "indent": 8, "text": ["Export Parameters"], "role": "item", "extent": [3328, 3355], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [3653, 3910], "text": ["There should be no threading issues with VEX.  In the unlikely\n            event that there are, this will allow you to determine which\n            node is guilty, and work around it without turning off threading\n            on a global scale."]}], "indent": 8, "text": ["Enable Multithreading"], "role": "item", "extent": [3622, 3653], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Vex Setup"], "extent": [2102, 2119], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 12, "type": "para", "extent": [3971, 4284], "text": ["Don\u2019t output any of the incoming volumes.  Instead, the output\n            will consiste of only geometry created by the VOPs.  This\n            is useful if generating points from volumes.  Note you will\n            still have to do a dummy write to any volume you wish\n            to iterate over."]}], "indent": 8, "text": ["Only Output Created Geometry"], "role": "item", "extent": [3932, 3971], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [4327, 4680], "text": ["When narrow-band SDFs are processed the sense of the interior cells\n            can be lost.  This results in the interior being falsely output with\n            the default background value.  This option will do the sweep to\n            reset these tiles to the correct sense.  It only affects VDBs which\n            are of grid class SDF."]}], "indent": 8, "text": ["Signed-Flood Fill Output SDF VDBs"], "role": "item", "extent": [4284, 4327], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [4706, 4911], "text": ["Will use the name primitive attribute to determine which\n            volume binds with which parameter.  If the name attribute\n            isn\u2019t present, the first volume is bound to density."]}, {"indent": 12, "type": "para", "extent": [4911, 5244], "text": ["A name like \"foo\" will be bound to the float parameter\n            \"foo\".  A name of \"foo.x\" will be bound to the x\n            component of the vector (three float) parameter \"foo\".  A\n            name like \"foo.zx\" will be bound to the x,z component of\n            the matrix (three by three) parameter \"foo\"."]}], "indent": 8, "text": ["Autobind by Name"], "role": "item", "extent": [4680, 4706], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [5274, 5389], "text": ["The VOP network will be applied to each volume in turn, with the\n            volume bound to density."]}], "indent": 8, "text": ["Bind Each to Density"], "role": "item", "extent": [5244, 5274], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [5439, 5748], "text": ["Manually specifies the bindings of each primitive.  This\n            is equivalent to those primitives having a name attribute\n            with the given name.  If Primitive Name is not empty,\n            the primitive with the matching name will be bound to the\n            given vex parameter."]}], "indent": 8, "text": ["Primitive, Primitive Name, VEX Parameter"], "role": "item", "extent": [5389, 5439], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Volume Bindings"], "extent": [3910, 3932], "container": true, "type": "h", "id": null}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [2090, 2102], "container": true, "type": "parameters_section", "id": "parameters"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [5757, 5784], "text": [{"text": "", "fullpath": "/nodes/sop/volumemix", "scheme": "Node", "type": "link", "value": "/nodes/sop/volumemix"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [5784, 5811], "text": [{"text": "", "fullpath": "/nodes/sop/isooffset", "scheme": "Node", "type": "link", "value": "/nodes/sop/isooffset"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [5811, 5833], "text": [{"text": "", "fullpath": "/nodes/sop/iso", "scheme": "Node", "type": "link", "value": "/nodes/sop/iso"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "extent": [5748, 5757], "container": true, "type": "related_section", "id": "related"}], "summary": ["Runs CVEX on a set of volume primitives."], "type": "root", "attrs": {"version": null, "tags": "volumes, merge", "namespace": null, "internal": "volumevop", "context": "sop", "type": "node", "icon": "SOP/volumevop"}, "title": ["Volume VOP"]}