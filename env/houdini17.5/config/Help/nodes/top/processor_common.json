{"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [71, 319], "text": ["Whether this node generates ", {"fragment": "#static", "text": ["static or dynamic"], "value": "/tops/intro#static", "fullpath": "/tops/intro#static", "scheme": null, "type": "link"}, " work items. You should generally leave this set to \"Automatic\" unless you know the node\u2019s work items can be computed statically, or that they need to be generated dynamically."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [332, 495], "text": ["This node always creates dynamic work items: it waits until the upstream work items are known, and generates new work items from the upstream work items."]}], "indent": 4, "type": "dt", "extent": [319, 332], "text": ["Dynamic"]}, {"body": [{"indent": 8, "type": "para", "extent": [507, 696], "text": ["This node always creates static work items: it creates the number of work items it thinks it needs based on the parameters (and any upstream static items) before the network runs."]}], "indent": 4, "type": "dt", "extent": [495, 507], "text": ["Static"]}, {"body": [{"indent": 8, "type": "para", "extent": [711, 902], "text": ["If the input is static (a static processor, or a partitioner with only static inputs, or a mapper), this node generates static work items, otherwise it generates dynamic work items."]}], "indent": 4, "type": "dt", "extent": [696, 711], "text": ["Automatic"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Work Item Generation"], "attrs": {"id": "pdg_workitemgeneration"}, "extent": [16, 38], "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [933, 1154], "text": ["The command line (executable and arguments) to run when the work item runs.\n    If this field is empty the work item will not be scheduled, and will be\n    instantly marked done once all of its dependencies finish. "]}], "indent": 0, "text": ["Command"], "attrs": {"id": "pdg_command"}, "extent": [902, 911], "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [1190, 1272], "text": ["How the processor node handles work items that report expected file results."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [1287, 1476], "text": ["If the expected result file exists on disk, the work item is marked as\n        cooked without being scheduled. If the file does not exist, the item\n        is scheduled as normal."]}], "indent": 4, "type": "dt", "extent": [1272, 1287], "text": ["Automatic"]}, {"body": [{"indent": 8, "type": "para", "extent": [1492, 1665], "text": ["If the expected result file exists on disk, the work item is marked as\n        cooked without being scheduled. Otherwise the work item is marked as\n        failed."]}], "indent": 4, "type": "dt", "extent": [1476, 1492], "text": ["Read Files"]}, {"body": [{"indent": 8, "type": "para", "extent": [1682, 1798], "text": ["Work items are always scheduled and the excepted result file is ignored,\n        even if it exists on disk."]}], "indent": 4, "type": "dt", "extent": [1665, 1682], "text": ["Write Files"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Cache Mode"], "attrs": {"id": "pdg_cachemode"}, "extent": [1154, 1166], "type": "dt"}], "container": true, "type": "dt_group"}], "type": "root", "attrs": {"type": "include"}}