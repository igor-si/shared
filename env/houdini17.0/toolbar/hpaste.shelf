<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="hpaste_shelf" label="HPaste">
    <memberTool name="hcopy"/>
    <memberTool name="hpaste"/>
    <memberTool name="hcopyweb"/>
    <memberTool name="hpasteweb"/>
    <memberTool name="hpasteoptions"/>
    <memberTool name="hpastecollection"/>
    <memberTool name="hpastecollectionauth"/>
  </toolshelf>

  <tool name="hcopy" label="HCopy" icon="copy.svg">
    <script scriptType="python"><![CDATA[try:
    from PySide2 import QtWidgets as qt
except:
    from PySide import QtGui as qt

import hpaste

def do():
    try:
        nodes=hou.selectedItems()
    except:
        nodes=hou.selectedNodes()
    try:
        s=hpaste.nodesToString(nodes)
    except RuntimeError as e:
        hou.ui.displayMessage("Error: %s"%str(e.message),severity=hou.severityType.Error)
        return
    except RuntimeWarning as e:
        hou.ui.displayMessage("Warning: %s"%str(e.message),severity=hou.severityType.Warning)
    except Exception as e:
        hou.ui.displayMessage("Internal Error: %s"%str(e.message),severity=hou.severityType.Error)
        return
    
    
    qt.qApp.clipboard().setText(s)
    
do()]]></script>
  </tool>

  <tool name="hpaste" label="HPaste" icon="paste.svg">
    <script scriptType="python"><![CDATA[try:
    from PySide2 import QtWidgets as qt
except:
    from PySide import QtGui as qt

import hpaste
import hpaste.hpasteoptions as opt

def do():
    s=qt.qApp.clipboard().text()
    
    try:
        hpaste.stringToNodes(s)
    except RuntimeError as e:
        hou.ui.displayMessage("Error: %s"%str(e.message),severity=hou.severityType.Error)
        return
    except RuntimeWarning as e:
        hou.ui.displayMessage("Warning: %s"%str(e.message),severity=hou.severityType.Warning)
    except Exception as e:
        hou.ui.displayMessage("Internal Error: %s"%str(e.message),severity=hou.severityType.Error)
        return

do()]]></script>
  </tool>

  <tool name="hcopyweb" label="HCopyWeb" icon="cloud-upload.svg">
    <script scriptType="python"><![CDATA[try:
    from PySide2 import QtWidgets as qt
    from PySide2 import QtCore as qtc
except:
    from PySide import QtGui as qt
    from PySide import QtCore as qtc
    
import hpaste

def do():
    try:
        nodes=hou.selectedItems()
    except:
        nodes=hou.selectedNodes()
    try:
        s=hpaste.nodesToString(nodes)
    except RuntimeError as e:
        hou.ui.displayMessage("Error: %s"%str(e.message),severity=hou.severityType.Error)
        return
    except RuntimeWarning as e:
        hou.ui.displayMessage("Warning: %s"%str(e.message),severity=hou.severityType.Warning)
    except Exception as e:
        hou.ui.displayMessage("Internal Error: %s"%str(e.message),severity=hou.severityType.Error)
        return
    
    qt.qApp.setOverrideCursor(qtc.Qt.WaitCursor);
    try:
        s=hpaste.webPack(s)
    except Exception as e:
        hou.ui.displayMessage(e.message,severity=hou.severityType.Error,title='error')
        return
    finally:
        qt.qApp.restoreOverrideCursor()
    
    qt.qApp.clipboard().setText(s)
    hou.ui.setStatusMessage("Success: Cloud link copied to clipboard!")

do()]]></script>
  </tool>

  <tool name="hpasteweb" label="HPasteWeb" icon="cloud-download.svg">
    <script scriptType="python"><![CDATA[try:
    from PySide2 import QtWidgets as qt
    from PySide2 import QtCore as qtc
except:
    from PySide import QtGui as qt
    from PySide import QtCore as qtc
    
import hpaste

def do(pane=None):
    s=qt.qApp.clipboard().text()
    qt.qApp.setOverrideCursor(qtc.Qt.WaitCursor);
    try:
        s=hpaste.webUnpack(s)
    except Exception as e:
        hou.ui.displayMessage(e.message,severity=hou.severityType.Error,title='error')
        return
    finally:
        qt.qApp.restoreOverrideCursor()
        
    try:
        hpaste.stringToNodes(s,ne=pane)
    except RuntimeError as e:
        hou.ui.displayMessage("Error: %s"%str(e.message),severity=hou.severityType.Error)
        return
    except RuntimeWarning as e:
        hou.ui.displayMessage("Warning: %s"%str(e.message),severity=hou.severityType.Warning)
    except Exception as e:
        hou.ui.displayMessage("Internal Error: %s"%str(e.message),severity=hou.severityType.Error)
        return
    hou.ui.setStatusMessage("Success: Nodes pasted!")


do(kwargs['pane'])
]]></script>
  </tool>

  <tool name="hpastecollection" label="Collection" icon="cloud-networking-svgrepo-com">
    <script scriptType="python"><![CDATA[try:
    from PySide2.QtGui import QCursor
    from PySide2.QtWidgets import QInputDialog, qApp
    from PySide2.QtCore import Qt
except ImportError:
    from PySide.QtGui import QCursor, QInputDialog, qApp
    from PySide.QtCore import Qt

#import hpaste.hpastecollectionwidget
#reload(hpaste.hpastecollectionwidget)
#from hpaste import getChildContext
from hpaste.hpastecollectionwidget import HPasteCollectionWidget


#print(kwargs)
def do(kwargs):
    pane=kwargs['pane']
    if(pane is None or not isinstance(pane,hou.NetworkEditor)):
        return
    
    qApp.setOverrideCursor(Qt.WaitCursor)
    try:
        mainwindow=hou.qt.mainWindow()
    except:
        mainwindow=hou.ui.mainQtWindow()
    
    try:
        wid=HPasteCollectionWidget(mainwindow)
    finally:
        qApp.restoreOverrideCursor()
    
    wid.move(QCursor.pos())
    wid.setNetworkEditor(pane)
    wid.show()
    
do(kwargs)]]></script>
  </tool>

  <tool name="hpastecollectionauth" label="Collection Authorization" icon="cloud-computing-tools-svgrepo-com">
    <script scriptType="python"><![CDATA[import hpaste.accountsmanager
from hpaste.accountsmanager import AccountsManager

try:
    mainwindow=hou.qt.mainWindow()
except:
    mainwindow=hou.ui.mainQtWindow()

wid=AccountsManager(mainwindow)

wid.show()]]></script>
  </tool>

  <tool name="hpasteoptions" label="HPaste Options" icon="options">
    <script scriptType="python"><![CDATA[from hpaste.optionsdialog import OptionsDialog

try:
    parent=hou.qt.mainWindow()
except:
    parent=hou.ui.mainQtWindow()

w=OptionsDialog(parent)

w.show()]]></script>
  </tool>
</shelfDocument>
