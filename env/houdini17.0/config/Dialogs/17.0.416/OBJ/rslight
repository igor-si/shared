// Magic: 560f402e
// Automatically generated PSI dialog (PSI version 17.0.416)
// Sat Aug  3 14:14:03 2019


f_tmp = FLOAT_FIELD;	// dialog.top.ui
keeppos.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

keeppos.gad = ROW
{
    

    PARM_BUTTON("keeppos", "Keep Position When Parenting") toggle VALUE(keeppos.val);

    {  }

}

pre_xform.gad = ROW
{

    {  }
    { WIDTH(0.1) }

    pre_xform.menu;
}
}	// Template join.bot

xOrd.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

xOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    PARM_LABEL_SIMPLE("Transform Order", "xOrd") WIDTH(1.5);
    { WIDTH(0.09) }

    xOrd.menu;

    {  }

}

rOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    rOrd.menu;

    {  }

}
}	// Template join.bot


t.gad = ROW
{
   HSTRETCH

   t.label = PARM_LABEL("Translate", "t") WIDTH(1.5);
   PARM(float, 3, "t", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(t.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_transform" VALUE(t.script_action)
	HELP("Select an object to match the translation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

r.gad = ROW
{
   HSTRETCH

   r.label = PARM_LABEL("Rotate", "r") WIDTH(1.5);
   PARM(float, 3, "r", none, none, "X,Y,Z")
	RANGE(0,360)  LABELREF(r.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_rotation" VALUE(r.script_action)
	HELP("Select an object to match the rotation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}
tdisplay.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
tdisplay.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

tdisplay.gad = PARM_BUTTON("tdisplay", "") toggle VALUE(tdisplay.val);

display.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 display.label = PARM_LABEL("Display", "display") WIDTH(1.32);
 PARM(integer, 1, "display", none, none) RANGE(0,1)
	LOCK_RANGE LABELREF(display.label) HSTRETCH;

}
}	
}	// Template join.bot


l_iconscale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 l_iconscale.label = PARM_LABEL("Icon Scale", "l_iconscale") WIDTH(1.5);
 PARM(float, 1, "l_iconscale", none, none) RANGE(0,10)
	 LABELREF(l_iconscale.label) HSTRETCH;

}

caching.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("caching", "Cache Object Transform") toggle VALUE(caching.val);

    { HSTRETCH }

}

picking.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("picking", "Viewport Selecting Enabled") toggle VALUE(picking.val);

    { HSTRETCH }

}

pickscript.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 pickscript.label = PARM_LABEL("Select Script", "pickscript") WIDTH(1.5);

 PARM_FIELD (pathstring, "pickscript") LABELREF(pickscript.label)
	VALUE(pickscript.val) HSTRETCH;

    pickscript.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(pickscript.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

near.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 near.label = PARM_LABEL("Near Clipping", "near") WIDTH(1.5);
 PARM(float, 1, "near", none, none) RANGE(0.001,10000)
	 LABELREF(near.label) HSTRETCH;

}

far.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 far.label = PARM_LABEL("Far Clipping", "far") WIDTH(1.5);
 PARM(float, 1, "far", none, none) RANGE(0.001,10000)
	 LABELREF(far.label) HSTRETCH;

}

lookatpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 lookatpath.label = PARM_LABEL("Look At", "lookatpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "lookatpath") VALUE(lookatpath.val) 
	LABELREF(lookatpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(lookatpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(lookatpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

lookup.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Look At Up Vector", "lookup") WIDTH(1.5);
    { WIDTH(0.09) }

    lookup.menu;

    { HSTRETCH }

}

pathobjpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 pathobjpath.label = PARM_LABEL("Path Object", "pathobjpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "pathobjpath") VALUE(pathobjpath.val) 
	LABELREF(pathobjpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(pathobjpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(pathobjpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

roll.gad = ROW
{
   HSTRETCH

   roll.label = PARM_LABEL( "Roll", "roll" ) WIDTH(1.5);
   PARM(float, 1, "roll", none, none) RANGE(-360, 360)
	LABELREF( roll.label ) HSTRETCH;

}

pos.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 pos.label = PARM_LABEL("Position", "pos") WIDTH(1.5);
 PARM(float, 1, "pos", none, none) RANGE(0,10)
	LOCK_RANGE_MIN LABELREF(pos.label) HSTRETCH;

}

uparmtype.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Parameterization", "uparmtype") WIDTH(1.5);
    { WIDTH(0.09) }

    uparmtype.menu;

    { HSTRETCH }

}

pathorient.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 pathorient.label = PARM_LABEL("Orient Along Path", "pathorient") WIDTH(1.5);
 PARM(integer, 1, "pathorient", none, none) RANGE(0,1)
	 LABELREF(pathorient.label) HSTRETCH;

}

up.gad = ROW 
{
    HSTRETCH

    up.label = PARM_LABEL("Orient Up Vector", "up") WIDTH(1.5);
    PARM(float, 3, "up", none, none) LABELREF(up.label)
	HSTRETCH;

}

bank.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 bank.label = PARM_LABEL("Auto-Bank factor", "bank") WIDTH(1.5);
 PARM(float, 1, "bank", none, none) RANGE(-1,1)
	 LABELREF(bank.label) HSTRETCH;

}

light_enabled.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("light_enabled", "On") toggle VALUE(light_enabled.val);

    { HSTRETCH }

}

ogl_enablelight.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ogl_enablelight", "Enabled In Viewports") toggle VALUE(ogl_enablelight.val);

    { HSTRETCH }

}

light_type.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Light Type", "light_type") WIDTH(1.5);
    { WIDTH(0.09) }

    light_type.menu;

    { HSTRETCH }

}

RSL_affectDiffuse.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_affectDiffuse", "Affect Diffuse") toggle VALUE(RSL_affectDiffuse.val);

    { HSTRETCH }

}

RSL_affectSpecular.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_affectSpecular", "Affect Specular") toggle VALUE(RSL_affectSpecular.val);

    { HSTRETCH }

}

RSL_matteShadow.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_matteShadow", "Matte Shadow Illuminator") toggle VALUE(RSL_matteShadow.val);

    { HSTRETCH }

}

RSL_affectedByRefraction.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Affected by Refraction", "RSL_affectedByRefraction") WIDTH(1.5);
    { WIDTH(0.09) }

    RSL_affectedByRefraction.menu;

    { HSTRETCH }

}

RSL_indirectMaxTraceDepth.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_indirectMaxTraceDepth.label = PARM_LABEL("GI Max Trace Depth", "RSL_indirectMaxTraceDepth") WIDTH(1.5);
 PARM(integer, 1, "RSL_indirectMaxTraceDepth", none, none) RANGE(0,255)
	LOCK_RANGE LABELREF(RSL_indirectMaxTraceDepth.label) HSTRETCH;

}

sepparm.gad = 

{
    LAYOUT(vertical) HSTRETCH 

    { HEIGHT(0.1) }
    SEPARATOR; 
    { HEIGHT(0.1) }
}

RSL_diffuseScale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_diffuseScale.label = PARM_LABEL("Diffuse Scale", "RSL_diffuseScale") WIDTH(1.5);
 PARM(float, 1, "RSL_diffuseScale", none, none) RANGE(0,1)
	 LABELREF(RSL_diffuseScale.label) HSTRETCH;

}

RSL_specularScale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_specularScale.label = PARM_LABEL("Specular Scale", "RSL_specularScale") WIDTH(1.5);
 PARM(float, 1, "RSL_specularScale", none, none) RANGE(0,1)
	 LABELREF(RSL_specularScale.label) HSTRETCH;

}

RSL_sssScale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_sssScale.label = PARM_LABEL("Single Scattering Scale", "RSL_sssScale") WIDTH(1.5);
 PARM(float, 1, "RSL_sssScale", none, none) RANGE(0,1)
	 LABELREF(RSL_sssScale.label) HSTRETCH;

}

RSL_multisssScale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_multisssScale.label = PARM_LABEL("Multiple Scattering Scale", "RSL_multisssScale") WIDTH(1.5);
 PARM(float, 1, "RSL_multisssScale", none, none) RANGE(0,1)
	 LABELREF(RSL_multisssScale.label) HSTRETCH;

}

RSL_indirectScale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_indirectScale.label = PARM_LABEL("GI Scale", "RSL_indirectScale") WIDTH(1.5);
 PARM(float, 1, "RSL_indirectScale", none, none) RANGE(0,1)
	 LABELREF(RSL_indirectScale.label) HSTRETCH;

}

RSL_areaShape.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Shape", "RSL_areaShape") WIDTH(1.5);
    { WIDTH(0.09) }

    RSL_areaShape.menu;

    { HSTRETCH }

}

areasize.gad = ROW
{
   HSTRETCH

   areasize.label = PARM_LABEL("Area Size", "areasize") WIDTH(1.5);
   PARM(float, 3, "areasize", none, none, "#1,#2,#3")
	RANGE(0,10)  LABELREF(areasize.label)
	HSTRETCH;

}

RSL_meshObject.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 RSL_meshObject.label = PARM_LABEL("Mesh Object", "RSL_meshObject") WIDTH(1.5);
 PARM_FIELD(pathstring, "RSL_meshObject") VALUE(RSL_meshObject.val) 
	LABELREF(RSL_meshObject.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(RSL_meshObject.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(RSL_meshObject.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

RSL_meshWrapU.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_meshWrapU", "Wrap U") toggle VALUE(RSL_meshWrapU.val);

    { HSTRETCH }

}

RSL_meshWrapV.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_meshWrapV", "Wrap V") toggle VALUE(RSL_meshWrapV.val);

    { HSTRETCH }

}

RSL_visible.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_visible", "Visible") toggle VALUE(RSL_visible.val);

    { HSTRETCH }

}

RSL_bidirectional.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_bidirectional", "Bi-directional") toggle VALUE(RSL_bidirectional.val);

    { HSTRETCH }

}

RSL_normalize.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_normalize", "Normalize Intensity") toggle VALUE(RSL_normalize.val);

    { HSTRETCH }

}

RSL_spread.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_spread.label = PARM_LABEL("Spread", "RSL_spread") WIDTH(1.5);
 PARM(float, 1, "RSL_spread", none, none) RANGE(0,1)
	LOCK_RANGE LABELREF(RSL_spread.label) HSTRETCH;

}

RSL_samples.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_samples.label = PARM_LABEL("Samples", "RSL_samples") WIDTH(1.5);
 PARM(integer, 1, "RSL_samples", none, none) RANGE(1,512)
	 LABELREF(RSL_samples.label) HSTRETCH;

}

coneangle.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 coneangle.label = PARM_LABEL("Cone Angle", "coneangle") WIDTH(1.5);
 PARM(float, 1, "coneangle", none, none) RANGE(0.10000000000000001,179.90000000000001)
	 LABELREF(coneangle.label) HSTRETCH;

}

Light1_spotConeFalloffAngle.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 Light1_spotConeFalloffAngle.label = PARM_LABEL("Fall-off Angle", "Light1_spotConeFalloffAngle") WIDTH(1.5);
 PARM(float, 1, "Light1_spotConeFalloffAngle", none, none) RANGE(0,180)
	 LABELREF(Light1_spotConeFalloffAngle.label) HSTRETCH;

}

Light1_dropoff.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 Light1_dropoff.label = PARM_LABEL("Fall-off Curve", "Light1_dropoff") WIDTH(1.5);
 PARM(float, 1, "Light1_dropoff", none, none) RANGE(0,10)
	 LABELREF(Light1_dropoff.label) HSTRETCH;

}

RSL_volumeScale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_volumeScale.label = PARM_LABEL("Contribution Scale", "RSL_volumeScale") WIDTH(1.5);
 PARM(float, 1, "RSL_volumeScale", none, none) RANGE(0,1)
	 LABELREF(RSL_volumeScale.label) HSTRETCH;

}

RSL_volumeSamples.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_volumeSamples.label = PARM_LABEL("Samples", "RSL_volumeSamples") WIDTH(1.5);
 PARM(integer, 1, "RSL_volumeSamples", none, none) RANGE(1,512)
	 LABELREF(RSL_volumeSamples.label) HSTRETCH;

}

RSL_lightGroup.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    RSL_lightGroup.label = PARM_LABEL("AOV Light Group", "RSL_lightGroup") WIDTH(1.5);
    PARM_FIELD(string, "RSL_lightGroup") VALUE(RSL_lightGroup.val) 
	LABELREF(RSL_lightGroup.label) HSTRETCH;

}

RSL_lightShaderPath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 RSL_lightShaderPath.label = PARM_LABEL("Light Shader Path", "RSL_lightShaderPath") WIDTH(1.5);
 PARM_FIELD(pathstring, "RSL_lightShaderPath") VALUE(RSL_lightShaderPath.val) 
	LABELREF(RSL_lightShaderPath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(RSL_lightShaderPath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(RSL_lightShaderPath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

Light1_on.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("Light1_on", "On") toggle VALUE(Light1_on.val);

    { HSTRETCH }

}

Light1_colorMode.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Mode", "Light1_colorMode") WIDTH(1.5);
    { WIDTH(0.09) }

    Light1_colorMode.menu;

    { HSTRETCH }

}

light_color.gad = 
{
    LAYOUT (horizontal) HSTRETCH

    light_color.label = PARM_LABEL("Color", "light_color") WIDTH(1.5);
    PARM(float, 3, "light_color", none, COLOR, "R,G,B") 
	LABELREF(light_color.label) HSTRETCH;

}

RSColorLayer1_layer1_enable.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSColorLayer1_layer1_enable", "Use Texture") toggle VALUE(RSColorLayer1_layer1_enable.val);

    { HSTRETCH }

}

Light1_temperature.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 Light1_temperature.label = PARM_LABEL("Temperature", "Light1_temperature") WIDTH(1.5);
 PARM(float, 1, "Light1_temperature", none, none) RANGE(1667,25000)
	 LABELREF(Light1_temperature.label) HSTRETCH;

}

RSL_intensityMultiplier.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_intensityMultiplier.label = PARM_LABEL("Intensity Multiplier", "RSL_intensityMultiplier") WIDTH(1.5);
 PARM(float, 1, "RSL_intensityMultiplier", none, none) RANGE(0,10000)
	 LABELREF(RSL_intensityMultiplier.label) HSTRETCH;

}

Light1_exposure.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 Light1_exposure.label = PARM_LABEL("Exposure", "Light1_exposure") WIDTH(1.5);
 PARM(float, 1, "Light1_exposure", none, none) RANGE(-10,10)
	 LABELREF(Light1_exposure.label) HSTRETCH;

}

Light1_unitsType.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Unit Type", "Light1_unitsType") WIDTH(1.5);
    { WIDTH(0.09) }

    Light1_unitsType.menu;

    { HSTRETCH }

}

Light1_lumensperwatt.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 Light1_lumensperwatt.label = PARM_LABEL("Luminous Efficacy (lm/w)", "Light1_lumensperwatt") WIDTH(1.5);
 PARM(float, 1, "Light1_lumensperwatt", none, none) RANGE(0,100)
	 LABELREF(Light1_lumensperwatt.label) HSTRETCH;

}

Light1_decayType.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Type", "Light1_decayType") WIDTH(1.5);
    { WIDTH(0.09) }

    Light1_decayType.menu;

    { HSTRETCH }

}

Light1_falloffStart.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 Light1_falloffStart.label = PARM_LABEL("Falloff Start", "Light1_falloffStart") WIDTH(1.5);
 PARM(float, 1, "Light1_falloffStart", none, none) RANGE(0,100)
	 LABELREF(Light1_falloffStart.label) HSTRETCH;

}

Light1_falloffStop.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 Light1_falloffStop.label = PARM_LABEL("Falloff Stop", "Light1_falloffStop") WIDTH(1.5);
 PARM(float, 1, "Light1_falloffStop", none, none) RANGE(0,100)
	 LABELREF(Light1_falloffStop.label) HSTRETCH;

}

Light1_shadow.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("Light1_shadow", "Enable") toggle VALUE(Light1_shadow.val);

    { HSTRETCH }

}

Light1_shadowTransparency.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 Light1_shadowTransparency.label = PARM_LABEL("Transparency", "Light1_shadowTransparency") WIDTH(1.5);
 PARM(float, 1, "Light1_shadowTransparency", none, none) RANGE(0,1)
	 LABELREF(Light1_shadowTransparency.label) HSTRETCH;

}

Light1_SAMPLINGOVERRIDES_shadowSamplesScale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 Light1_SAMPLINGOVERRIDES_shadowSamplesScale.label = PARM_LABEL("Softness", "Light1_SAMPLINGOVERRIDES_shadowSamplesScale") WIDTH(1.5);
 PARM(float, 1, "Light1_SAMPLINGOVERRIDES_shadowSamplesScale", none, none) RANGE(0,2)
	 LABELREF(Light1_SAMPLINGOVERRIDES_shadowSamplesScale.label) HSTRETCH;

}

Light1_SAMPLINGOVERRIDES_numShadowSamples.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 Light1_SAMPLINGOVERRIDES_numShadowSamples.label = PARM_LABEL("Samples", "Light1_SAMPLINGOVERRIDES_numShadowSamples") WIDTH(1.5);
 PARM(integer, 1, "Light1_SAMPLINGOVERRIDES_numShadowSamples", none, none) RANGE(1,256)
	 LABELREF(Light1_SAMPLINGOVERRIDES_numShadowSamples.label) HSTRETCH;

}

TextureSampler1_tex0.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 TextureSampler1_tex0.label = PARM_LABEL("Filename", "TextureSampler1_tex0") WIDTH(1.5);

 PARM_FIELD (pathstring, "TextureSampler1_tex0") LABELREF(TextureSampler1_tex0.label)
	VALUE(TextureSampler1_tex0.val) HSTRETCH;

    TextureSampler1_tex0.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(TextureSampler1_tex0.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

TextureSampler1_tex0_gammaoverride.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("TextureSampler1_tex0_gammaoverride", "Enable") toggle VALUE(TextureSampler1_tex0_gammaoverride.val);

    { HSTRETCH }

}

TextureSampler1_tex0_srgb.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("TextureSampler1_tex0_srgb", "sRGB") toggle VALUE(TextureSampler1_tex0_srgb.val);

    { HSTRETCH }

}

TextureSampler1_tex0_gamma.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 TextureSampler1_tex0_gamma.label = PARM_LABEL("Gamma", "TextureSampler1_tex0_gamma") WIDTH(1.5);
 PARM(float, 1, "TextureSampler1_tex0_gamma", none, none) RANGE(0,16)
	 LABELREF(TextureSampler1_tex0_gamma.label) HSTRETCH;

}

TextureSampler1_tspace_id.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    TextureSampler1_tspace_id.label = PARM_LABEL("UV Channel", "TextureSampler1_tspace_id") WIDTH(1.5);
    PARM_FIELD(string, "TextureSampler1_tspace_id") VALUE(TextureSampler1_tspace_id.val) 
	LABELREF(TextureSampler1_tspace_id.label) HSTRETCH;

}

TextureSampler1_mirrorU.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("TextureSampler1_mirrorU", "Mirror U") toggle VALUE(TextureSampler1_mirrorU.val);

    { HSTRETCH }

}

TextureSampler1_mirrorV.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("TextureSampler1_mirrorV", "Mirror V") toggle VALUE(TextureSampler1_mirrorV.val);

    { HSTRETCH }

}

TextureSampler1_wrapU.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("TextureSampler1_wrapU", "Wrap U") toggle VALUE(TextureSampler1_wrapU.val);

    { HSTRETCH }

}

TextureSampler1_wrapV.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("TextureSampler1_wrapV", "Wrap V") toggle VALUE(TextureSampler1_wrapV.val);

    { HSTRETCH }

}

TextureSampler1_scale.gad = ROW
{
   HSTRETCH

   TextureSampler1_scale.label = PARM_LABEL("Scale", "TextureSampler1_scale") WIDTH(1.5);
   PARM(float, 2, "TextureSampler1_scale", none, none, "#1,#2")
	RANGE(1.1754899999999999e-38,3.4028200000000001e+38)  LABELREF(TextureSampler1_scale.label)
	HSTRETCH;

}

TextureSampler1_offset.gad = ROW
{
   HSTRETCH

   TextureSampler1_offset.label = PARM_LABEL("Offset", "TextureSampler1_offset") WIDTH(1.5);
   PARM(float, 2, "TextureSampler1_offset", none, none, "#1,#2")
	RANGE(1.1754899999999999e-38,3.4028200000000001e+38)  LABELREF(TextureSampler1_offset.label)
	HSTRETCH;

}

TextureSampler1_rotate.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 TextureSampler1_rotate.label = PARM_LABEL("Rotate", "TextureSampler1_rotate") WIDTH(1.5);
 PARM(float, 1, "TextureSampler1_rotate", none, none) RANGE(0,360)
	 LABELREF(TextureSampler1_rotate.label) HSTRETCH;

}

TextureSampler1_color_multiplier.gad = 
{
    LAYOUT (horizontal) HSTRETCH

    TextureSampler1_color_multiplier.label = PARM_LABEL("Color Multiplier", "TextureSampler1_color_multiplier") WIDTH(1.5);
    PARM(float, 3, "TextureSampler1_color_multiplier", none, COLOR, "R,G,B") 
	LABELREF(TextureSampler1_color_multiplier.label) HSTRETCH;

}

TextureSampler1_color_offset.gad = 
{
    LAYOUT (horizontal) HSTRETCH

    TextureSampler1_color_offset.label = PARM_LABEL("Color Offset", "TextureSampler1_color_offset") WIDTH(1.5);
    PARM(float, 3, "TextureSampler1_color_offset", none, COLOR, "R,G,B") 
	LABELREF(TextureSampler1_color_offset.label) HSTRETCH;

}

TextureSampler1_alpha_multiplier.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 TextureSampler1_alpha_multiplier.label = PARM_LABEL("Alpha Multiplier", "TextureSampler1_alpha_multiplier") WIDTH(1.5);
 PARM(float, 1, "TextureSampler1_alpha_multiplier", none, none) RANGE(0,1)
	 LABELREF(TextureSampler1_alpha_multiplier.label) HSTRETCH;

}

TextureSampler1_alpha_offset.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 TextureSampler1_alpha_offset.label = PARM_LABEL("Alpha Offset", "TextureSampler1_alpha_offset") WIDTH(1.5);
 PARM(float, 1, "TextureSampler1_alpha_offset", none, none) RANGE(0,1)
	 LABELREF(TextureSampler1_alpha_offset.label) HSTRETCH;

}

TextureSampler1_alpha_is_luminance.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("TextureSampler1_alpha_is_luminance", "Alpha Is Luminance") toggle VALUE(TextureSampler1_alpha_is_luminance.val);

    { HSTRETCH }

}

TextureSampler1_invalid_color.gad = 
{
    LAYOUT (horizontal) HSTRETCH

    TextureSampler1_invalid_color.label = PARM_LABEL("TextureSampler1 Default/Invalid Color", "TextureSampler1_invalid_color") WIDTH(1.5);
    PARM(float, 4, "TextureSampler1_invalid_color", none, COLOR, "R,G,B,A") 
	LABELREF(TextureSampler1_invalid_color.label) HSTRETCH;

}

TextureSampler1_filter_enable_type.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Filter Enable", "TextureSampler1_filter_enable_type") WIDTH(1.5);
    { WIDTH(0.09) }

    TextureSampler1_filter_enable_type.menu;

    { HSTRETCH }

}

TextureSampler1_filter_bicubic.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("TextureSampler1_filter_bicubic", "Bicubic Filtering") toggle VALUE(TextureSampler1_filter_bicubic.val);

    { HSTRETCH }

}

TextureSampler1_prefer_sharp.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("TextureSampler1_prefer_sharp", "Prefer Sharp Filtering") toggle VALUE(TextureSampler1_prefer_sharp.val);

    { HSTRETCH }

}

TextureSampler1_mip_bias.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 TextureSampler1_mip_bias.label = PARM_LABEL("Mip Bias", "TextureSampler1_mip_bias") WIDTH(1.5);
 PARM(float, 1, "TextureSampler1_mip_bias", none, none) RANGE(-32,32)
	 LABELREF(TextureSampler1_mip_bias.label) HSTRETCH;

}

RSL_emitCausticPhotons.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_emitCausticPhotons", "Emit Caustic Photons") toggle VALUE(RSL_emitCausticPhotons.val);

    { HSTRETCH }

}

RSL_causticIntensity.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_causticIntensity.label = PARM_LABEL("Intensity Multiplier", "RSL_causticIntensity") WIDTH(1.5);
 PARM(float, 1, "RSL_causticIntensity", none, none) RANGE(0,2)
	 LABELREF(RSL_causticIntensity.label) HSTRETCH;

}

RSL_causticPhotons.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_causticPhotons.label = PARM_LABEL("Number of Photons", "RSL_causticPhotons") WIDTH(1.5);
 PARM(integer, 1, "RSL_causticPhotons", none, LOGSCALE) RANGE(10000,1000000)
	 LABELREF(RSL_causticPhotons.label) HSTRETCH;

}

RSL_emitGIPhotons.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_emitGIPhotons", "Emit GI Photons") toggle VALUE(RSL_emitGIPhotons.val);

    { HSTRETCH }

}

RSL_giIntensity.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_giIntensity.label = PARM_LABEL("Intensity Multiplier", "RSL_giIntensity") WIDTH(1.5);
 PARM(float, 1, "RSL_giIntensity", none, none) RANGE(0,2)
	 LABELREF(RSL_giIntensity.label) HSTRETCH;

}

RSL_giPhotons.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_giPhotons.label = PARM_LABEL("Number of Photons", "RSL_giPhotons") WIDTH(1.5);
 PARM(integer, 1, "RSL_giPhotons", none, LOGSCALE) RANGE(10000,1000000)
	 LABELREF(RSL_giPhotons.label) HSTRETCH;

}

RSL_setInclusive.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_setInclusive", "Enable Light-Mesh Associations") toggle VALUE(RSL_setInclusive.val);

    { HSTRETCH }

}

RSL_lightLinking.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_lightLinking.label = PARM_LABEL("Light Enabled For", "RSL_lightLinking") WIDTH(1.5);
 PARM_FIELD (pathstring, "RSL_lightLinking") LABELREF(RSL_lightLinking.label) 
	VALUE(RSL_lightLinking.val) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(RSL_lightLinking.plus) LOOKFLAT
    HELP("Open floating bundle chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

RSL_shadowLinking.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 RSL_shadowLinking.label = PARM_LABEL("Shadows Enabled For", "RSL_shadowLinking") WIDTH(1.5);
 PARM_FIELD (pathstring, "RSL_shadowLinking") LABELREF(RSL_shadowLinking.label) 
	VALUE(RSL_shadowLinking.val) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(RSL_shadowLinking.plus) LOOKFLAT
    HELP("Open floating bundle chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}
atten_type.gad = NULL { }
light_intensity.gad = NULL { }
use_dcolor.gad = NULL { }
dcolor.gad = NULL { }
s.gad = NULL { }
p.gad = NULL { }
scale.gad = NULL { }
dimmer.gad = NULL { }
light_enable.gad = NULL { }
shadow_type.gad = NULL { }
light_exposure.gad = NULL { }
projection.gad = NULL { }
childcomp.gad = NULL { }
lookupobjpath.gad = NULL { }
pr.gad = NULL { }
constraints_on.gad = NULL { }
constraints_path.gad = NULL { }

folder8.gad = 
GROUP simple "Global Illumination"
{ 
    VALUE(folder8.gad.val) LAYOUT(vertical) HSTRETCH 
	    RSL_emitGIPhotons.gad;		
	    RSL_giIntensity.gad;		
	    RSL_giPhotons.gad;		
} 

folder7.gad = 
GROUP simple "Caustics"
{ 
    VALUE(folder7.gad.val) LAYOUT(vertical) HSTRETCH 
	    RSL_emitCausticPhotons.gad;		
	    RSL_causticIntensity.gad;		
	    RSL_causticPhotons.gad;		
} 

TextureSampler1_Remap_3.gad = 
GROUP simple "Remap"
{ 
    VALUE(TextureSampler1_Remap_3.gad.val) LAYOUT(vertical) HSTRETCH 
	    TextureSampler1_scale.gad;		
	    TextureSampler1_offset.gad;		
	    TextureSampler1_rotate.gad;		
} 

TextureSampler1_UV_2.gad = 
GROUP simple "UV"
{ 
    VALUE(TextureSampler1_UV_2.gad.val) LAYOUT(vertical) HSTRETCH 
	    TextureSampler1_tspace_id.gad;		
	    TextureSampler1_mirrorU.gad;		
	    TextureSampler1_mirrorV.gad;		
	    TextureSampler1_wrapU.gad;		
	    TextureSampler1_wrapV.gad;		
	    TextureSampler1_Remap_3.gad;		
} 

TextureSampler1_Gamma_Override_1.gad = 
GROUP simple "Gamma Override"
{ 
    VALUE(TextureSampler1_Gamma_Override_1.gad.val) LAYOUT(vertical) HSTRETCH 
	    TextureSampler1_tex0_gammaoverride.gad;		
	    TextureSampler1_tex0_srgb.gad;		
	    TextureSampler1_tex0_gamma.gad;		
} 

TextureSampler1_Image_0.gad = 
GROUP simple "Image"
{ 
    VALUE(TextureSampler1_Image_0.gad.val) LAYOUT(vertical) HSTRETCH 
	    TextureSampler1_tex0.gad;		
	    TextureSampler1_Gamma_Override_1.gad;		
} 

TextureSampler1_RS_shaderNodeMainSwitcher.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG2 "TextureSampler1_RS_shaderNodeMainSwitcher.gad"
    { 
	VALUE(TextureSampler1_RS_shaderNodeMainSwitcher.gad.val) STRETCH(1,0)

	TAB "General"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(2p) SPACING(2p)
	    TextureSampler1_Image_0.gad;		
	    TextureSampler1_UV_2.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Adjust"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(2p) SPACING(2p)
	    TextureSampler1_color_multiplier.gad;		
	    TextureSampler1_color_offset.gad;		
	    TextureSampler1_alpha_multiplier.gad;		
	    TextureSampler1_alpha_offset.gad;		
	    TextureSampler1_alpha_is_luminance.gad;		
	    TextureSampler1_invalid_color.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Advanced"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(2p) SPACING(2p)
	    TextureSampler1_filter_enable_type.gad;		
	    TextureSampler1_filter_bicubic.gad;		
	    TextureSampler1_prefer_sharp.gad;		
	    TextureSampler1_mip_bias.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

Light1_General_0_3.gad = 
GROUP simple "Attenuation"
{ 
    VALUE(Light1_General_0_3.gad.val) LAYOUT(vertical) HSTRETCH 
} 

Light1_General_0_2.gad = 
GROUP simple "Shadow"
{ 
    VALUE(Light1_General_0_2.gad.val) LAYOUT(vertical) HSTRETCH 
	    Light1_shadow.gad;		
	    Light1_shadowTransparency.gad;		
	    Light1_SAMPLINGOVERRIDES_shadowSamplesScale.gad;		
	    Light1_SAMPLINGOVERRIDES_numShadowSamples.gad;		
} 

Light1_General_0_1.gad = 
GROUP simple "Decay"
{ 
    VALUE(Light1_General_0_1.gad.val) LAYOUT(vertical) HSTRETCH 
	    Light1_decayType.gad;		
	    Light1_falloffStart.gad;		
	    Light1_falloffStop.gad;		
} 

Light1_General_0.gad = 
GROUP simple "General"
{ 
    VALUE(Light1_General_0.gad.val) LAYOUT(vertical) HSTRETCH 
	    Light1_on.gad;		
	    Light1_colorMode.gad;		
	    light_color.gad;		
	    RSColorLayer1_layer1_enable.gad;		
	    Light1_temperature.gad;		
	    RSL_intensityMultiplier.gad;		
	    Light1_exposure.gad;		
	    Light1_unitsType.gad;		
	    Light1_lumensperwatt.gad;		
} 

folder6.gad = 
GROUP simple "Shader path"
{ 
    VALUE(folder6.gad.val) LAYOUT(vertical) HSTRETCH 
	    RSL_lightShaderPath.gad;		
} 

folder9.gad = 
GROUP simple "Light Group"
{ 
    VALUE(folder9.gad.val) LAYOUT(vertical) HSTRETCH 
	    RSL_lightGroup.gad;		
} 

folder5.gad = 
GROUP simple "Volume"
{ 
    VALUE(folder5.gad.val) LAYOUT(vertical) HSTRETCH 
	    RSL_volumeScale.gad;		
	    RSL_volumeSamples.gad;		
} 

folder1.gad = 
GROUP simple "Spot"
{ 
    VALUE(folder1.gad.val) LAYOUT(vertical) HSTRETCH 
	    coneangle.gad;		
	    Light1_spotConeFalloffAngle.gad;		
	    Light1_dropoff.gad;		
} 

folder4.gad = 
GROUP simple "Area"
{ 
    VALUE(folder4.gad.val) LAYOUT(vertical) HSTRETCH 
	    RSL_areaShape.gad;		
	    areasize.gad;		
	    RSL_meshObject.gad;		
	    RSL_meshWrapU.gad;		
	    RSL_meshWrapV.gad;		
	    RSL_visible.gad;		
	    RSL_bidirectional.gad;		
	    RSL_normalize.gad;		
	    RSL_spread.gad;		
	    RSL_samples.gad;		
} 

folder2.gad = 
GROUP simple "Ray Contribution"
{ 
    VALUE(folder2.gad.val) LAYOUT(vertical) HSTRETCH 
	    RSL_affectDiffuse.gad;		
	    RSL_affectSpecular.gad;		
	    RSL_matteShadow.gad;		
	    RSL_affectedByRefraction.gad;		
	    RSL_indirectMaxTraceDepth.gad;		
	    sepparm.gad;		
	    RSL_diffuseScale.gad;		
	    RSL_specularScale.gad;		
	    RSL_sssScale.gad;		
	    RSL_multisssScale.gad;		
	    RSL_indirectScale.gad;		
} 

folder3.gad = 
GROUP simple "Light"
{ 
    VALUE(folder3.gad.val) LAYOUT(vertical) HSTRETCH 
	    light_enabled.gad;		
	    ogl_enablelight.gad;		
	    light_type.gad;		
} 

folder1_2.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG2 "folder1_2.gad"
    { 
	VALUE(folder1_2.gad.val) STRETCH(1,0)

	TAB "Viewing Options"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(2p) SPACING(2p)
	    tdisplay.row.join;		
	    l_iconscale.gad;		
	    caching.gad;		
	    picking.gad;		
	    pickscript.gad;		
	    near.gad;		
	    far.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Lookat Options"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(2p) SPACING(2p)
	    lookatpath.gad;		
	    lookup.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Path Options"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(2p) SPACING(2p)
	    pathobjpath.gad;		
	    roll.gad;		
	    pos.gad;		
	    uparmtype.gad;		
	    pathorient.gad;		
	    up.gad;		
	    bank.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

folder0.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG2 "folder0.gad"
    { 
	VALUE(folder0.gad.val) STRETCH(1,0)

	TAB "Transform"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    keeppos.row.join;		
	    xOrd.row.join;		
	    t.gad;		
	    r.gad;		
	    folder1_2.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Light"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    folder3.gad;		
	    folder2.gad;		
	    folder4.gad;		
	    folder1.gad;		
	    folder5.gad;		
	    folder9.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Shader"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    folder6.gad;		
	    Light1_General_0.gad;		
	    Light1_General_0_1.gad;		
	    Light1_General_0_2.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Texture"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    TextureSampler1_RS_shaderNodeMainSwitcher.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Photon"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    folder7.gad;		
	    folder8.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Objects"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    RSL_setInclusive.gad;		
	    RSL_lightLinking.gad;		
	    RSL_shadowLinking.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

dialog_norm.gad = 
{
    LAYOUT(vertical) SPACING(0.02) HSTRETCH LOOK(plain) 
    folder0.gad; 
    projection.gad; 
    childcomp.gad; 
    lookupobjpath.gad; 
    pr.gad; 
    constraints_on.gad; 
    constraints_path.gad; 
} 
// dialog.bot.ui

extrastuffstowbar_minimize.val := 1;

dialog = OPENNOTIFIER
{
    LAYOUT(vertical) SPACING(0.02) LOOK(bg) VALUE(open.val) HSTRETCH

    { HEIGHT(1p) LOOK(bg) HSTRETCH }

    dialog_norm.gad;
}
