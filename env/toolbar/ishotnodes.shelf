<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="ishotnodes_shelf" label="ISHotNodes">
    <memberTool name="attribwrangle10"/>
    <memberTool name="attribrandomize"/>
    <memberTool name="attribexpression"/>
    <memberTool name="attribwrangle"/>
    <memberTool name="attribwrangle2"/>
    <memberTool name="subnet4"/>
    <memberTool name="attribcreate::2.0"/>
    <memberTool name="timeshift"/>
    <memberTool name="timeshift0"/>
    <memberTool name="add"/>
    <memberTool name="subnet3"/>
    <memberTool name="For-Each Named Primitive Compiled"/>
    <memberTool name="attribwrangle12"/>
    <memberTool name="null0"/>
    <memberTool name="subnet16"/>
    <memberTool name="attribwrangle13"/>
    <memberTool name="attribwrangle14"/>
  </toolshelf>

  <tool name="attribwrangle" label="vMult" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_integration_vMult (Sop/attribwrangle)
set _obj_integration_vMult = `run("opadd -e -n -v attribwrangle vMult")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_integration_vMult
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "vel_mult"         label   "Vel Mult"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "min"         label   "Min"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "max"         label   "Max"         type    float         default { "0" }         range   { 0 1 }     } ' $_obj_integration_vMult
opparm $_obj_integration_vMult  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_integration_vMult snippet ( 'vector v = v@v;\nvector vN = normalize(v);\nfloat vL = length(v);\nv@v = clamp(vL*chf("vel_mult"),chf("min"),chf("max"))*vN;\n' ) vel_mult ( 1 ) max ( 100 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_integration_vMult
opexprlanguage -s hscript $_obj_integration_vMult
opuserdata -n '___Version___' -v '' $_obj_integration_vMult
opset -p on $_obj_integration_vMult

opcf $arg1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_integration_vMult
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_integration_vMult
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribrandomize" label="pscale" icon="SOP_attribrandomize">
    <helpURL>operator:Sop/attribrandomize</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribrandomize</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribrandomize'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_integration_pscale (Sop/attribrandomize)
set _obj_integration_pscale = `run("opadd -e -n -v attribrandomize pscale")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_integration_pscale
opparm $_obj_integration_pscale  ramp ( 2 ) values ( 4 )
opparm $_obj_integration_pscale name ( pscale ) distribution ( ramp ) dimensions ( 1 ) usefit0to ( on ) fit0to ( 0.75 ) usefit1to ( on ) fit1to ( 1.25 ) ramp ( 2 ) seed ( 5715 ) ramp2pos ( 1 ) ramp2value ( 1 )
opcolor -c 0.42599990963935852 0.47039997577667236 0.59999990463256836 $_obj_integration_pscale
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_integration_pscale
opexprlanguage -s hscript $_obj_integration_pscale
opuserdata -n '___Version___' -v '' $_obj_integration_pscale
opset -p on $_obj_integration_pscale

opcf $arg1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_integration_pscale
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_integration_pscale
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribwrangle2" label="attribOverAge" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_integration_attribOverAge (Sop/attribwrangle)
set _obj_integration_attribOverAge = `run("opadd -e -n -v attribwrangle attribOverAge")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_integration_attribOverAge
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "age_max"         label   "Age Max"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "age"         label   "Age"         type    ramp_flt         default { "2" }         range   { 1! 10 }     }     parm {         name    "value"         label   "Value"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "attrib_name"         label   "Attrib Name"         type    string         default { "" }     } ' $_obj_integration_attribOverAge
opparm $_obj_integration_attribOverAge  bindings ( 0 ) groupbindings ( 0 ) age ( 2 )
chblockbegin
chadd -t 40.791666666666664 40.791666666666664 $_obj_integration_attribOverAge age_max
chkey -t 40.791666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 7.0/24.0 $_obj_integration_attribOverAge/age_max
chblockend
opparm $_obj_integration_attribOverAge snippet ( 'float age_max = ch("age_max");\nfloat nage = fit(@age,0,age_max,0,1);\nnage = chramp("age",nage);\nstring attrib_name = chs("attrib_name");\n\nfloat val = point(0,attrib_name,@ptnum);\nsetpointattrib(0,attrib_name,@ptnum,chf("value")*nage,"set");' ) age_max ( age_max ) value ( 1 ) attrib_name ( density ) age2pos ( 1 ) age2value ( 1 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_integration_attribOverAge
opexprlanguage -s hscript $_obj_integration_attribOverAge
opuserdata -n '___Version___' -v '' $_obj_integration_attribOverAge
opset -p on $_obj_integration_attribOverAge

opcf $arg1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_integration_attribOverAge
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_integration_attribOverAge
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribcreate::2.0" label="attribCreatePidPrid" icon="SOP_attribcreate-2.0">
    <helpURL>operator:Sop/attribcreate?version=2.0</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribcreate::2.0</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribcreate::2.0'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_tube1_attribCreatePidPrid (Sop/attribcreate::2.0)
set _obj_tube1_attribCreatePidPrid = `run("opadd -e -n -v attribcreate::2.0 attribCreatePidPrid")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_tube1_attribCreatePidPrid
opparm $_obj_tube1_attribCreatePidPrid  numattr ( 2 )
chblockbegin
chadd -t 0 0 $_obj_tube1_attribCreatePidPrid value1v1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$PT' $_obj_tube1_attribCreatePidPrid/value1v1
chadd -t 0 0 $_obj_tube1_attribCreatePidPrid value2v1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$PR' $_obj_tube1_attribCreatePidPrid/value2v1
chblockend
opparm -V 17.0.416 $_obj_tube1_attribCreatePidPrid numattr ( 2 ) name1 ( pid ) type1 ( int ) value1v ( value1v1 0 0 0 ) name2 ( prid ) class2 ( primitive ) type2 ( int ) value2v ( value2v1 0 0 0 )
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_tube1_attribCreatePidPrid
opexprlanguage -s hscript $_obj_tube1_attribCreatePidPrid
opuserdata -n '___Version___' -v '17.0.416' $_obj_tube1_attribCreatePidPrid
opset -p on $_obj_tube1_attribCreatePidPrid

opcf $arg1
opwire -n $_obj_tube1_sphere2 -0 $_obj_tube1_attribCreatePidPrid

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_tube1_attribCreatePidPrid
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_tube1_attribCreatePidPrid
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="subnet3" label="isCameraFrustum" icon="SOP_subnet">
    <helpURL>operator:Sop/subnet</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/subnet</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('subnet'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo_isCameraFrustum (Sop/subnet)
set _obj_geo_isCameraFrustum = `run("opadd -e -n -v subnet isCameraFrustum")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo_isCameraFrustum
opspareds '    parm {         name    "label1"         baseparm         label   "Input #1 Label"         invisible         export  dialog     }     parm {         name    "label2"         baseparm         label   "Input #2 Label"         invisible         export  dialog     }     parm {         name    "label3"         baseparm         label   "Input #3 Label"         invisible         export  dialog     }     parm {         name    "label4"         baseparm         label   "Input #4 Label"         invisible         export  dialog     }     parm {         name    "camera"         label   "Camera"         type    oppath         default { "../../../cam1" }         parmtag { "autoscope" "0000000000000000" }         parmtag { "opfilter" "!!OBJ/CAMERA!!" }         parmtag { "oprelative" "." }     }     parm {         name    "zmax"         label   "Z Far"         type    float         default { "4" }         range   { 0 10 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "zmin"         label   "Z Near"         type    float         default { "0.035" }         range   { 0 10 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "winx"         label   "Window X"         type    float_minmax         size    2         default { "0" "1" }         range   { 0 10 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "winy"         label   "Window Y"         type    float_minmax         size    2         default { "0" "1" }         range   { 0 10 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "uniformsamples"         label   "Uniform Sampling"         type    ordinal         default { "divsize" }         menu {             "nonsquare" "Non Square"             "xaxis"     "X Axis"             "yaxis"     "Y Axis"             "zaxis"     "Z Axis"             "maxaxis"   "Max Axis"             "divsize"   "By Size"         }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "divsize"         label   "Div Size"         type    float         default { "0.05" }         range   { 0! 10 }         parmtag { "autoscope" "0000000000000000" }     } ' $_obj_geo_isCameraFrustum
opparm -V 17.0.416 $_obj_geo_isCameraFrustum camera ( ../../cam1 )
opcolor -c 0.70999997854232788 0.51800000667572021 0.0040000001899898052 $_obj_geo_isCameraFrustum
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo_isCameraFrustum
opexprlanguage -s hscript $_obj_geo_isCameraFrustum
opuserdata -n '___Version___' -v '17.0.416' $_obj_geo_isCameraFrustum
opcf $_obj_geo_isCameraFrustum

# Node $_obj_geo_isCameraFrustum_vdb1 (Sop/vdb)
set _obj_geo_isCameraFrustum_vdb1 = `run("opadd -e -n -v vdb vdb1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 5.2176` $_obj_geo_isCameraFrustum_vdb1
opparm $_obj_geo_isCameraFrustum_vdb1  ngrids ( 1 )
chblockbegin
chadd -t 0 0 $_obj_geo_isCameraFrustum_vdb1 camera
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'chsop("../camera")' $_obj_geo_isCameraFrustum_vdb1/camera
chadd -t 0 0 $_obj_geo_isCameraFrustum_vdb1 zmin
chkey -t 0 -v 0.035000000000000003 -m 0 -a 0 -A 0 -T a  -F 'ch("../zmin")' $_obj_geo_isCameraFrustum_vdb1/zmin
chadd -t 0 0 $_obj_geo_isCameraFrustum_vdb1 zmax
chkey -t 0 -v 4 -m 0 -a 0 -A 0 -T a  -F 'ch("../zmax")' $_obj_geo_isCameraFrustum_vdb1/zmax
chadd -t 0 0 $_obj_geo_isCameraFrustum_vdb1 winxmin
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../winxmin")' $_obj_geo_isCameraFrustum_vdb1/winxmin
chadd -t 0 0 $_obj_geo_isCameraFrustum_vdb1 winxmax
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../winxmax")' $_obj_geo_isCameraFrustum_vdb1/winxmax
chadd -t 0 0 $_obj_geo_isCameraFrustum_vdb1 winymin
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../winymin")' $_obj_geo_isCameraFrustum_vdb1/winymin
chadd -t 0 0 $_obj_geo_isCameraFrustum_vdb1 winymax
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../winymax")' $_obj_geo_isCameraFrustum_vdb1/winymax
chadd -t 0 0 $_obj_geo_isCameraFrustum_vdb1 uniformsamples
chkey -t 0 -v 5 -m 0 -a 0 -A 0 -T a  -F 'ch("../uniformsamples")' $_obj_geo_isCameraFrustum_vdb1/uniformsamples
chadd -t 0 0 $_obj_geo_isCameraFrustum_vdb1 divsize
chkey -t 0 -v 0.050000000000000003 -m 0 -a 0 -A 0 -T a  -F 'ch("../divsize")' $_obj_geo_isCameraFrustum_vdb1/divsize
chblockend
opparm -V 17.0.416 $_obj_geo_isCameraFrustum_vdb1 source ( 2 2 2 ) camera ( camera ) zmin ( zmin ) zmax ( zmax ) winx ( winxmin winxmax ) winy ( winymin winymax ) uniformsamples ( uniformsamples ) divsize ( divsize ) name1 ( density )
opset -d off -r on -h off -f off -y off -t on -l off -s off -u off -F on -c on -e on -b off $_obj_geo_isCameraFrustum_vdb1
opexprlanguage -s hscript $_obj_geo_isCameraFrustum_vdb1
opuserdata -n '___Version___' -v '17.0.416' $_obj_geo_isCameraFrustum_vdb1

# Node $_obj_geo_isCameraFrustum_vdbactivate2 (Sop/vdbactivate)
set _obj_geo_isCameraFrustum_vdbactivate2 = `run("opadd -e -n -v vdbactivate vdbactivate2")`
oplocate -x `$arg2 + 0` -y `$arg3 + 4.1721190000000004` $_obj_geo_isCameraFrustum_vdbactivate2
chblockbegin
chadd -t 0 0 $_obj_geo_isCameraFrustum_vdbactivate2 sizex
chkey -t 0 -v 20 -m 0 -a 0 -A 0 -T a  -F 'ch("../vdb1/zmax")*2' $_obj_geo_isCameraFrustum_vdbactivate2/sizex
chadd -t 0 0 $_obj_geo_isCameraFrustum_vdbactivate2 sizey
chkey -t 0 -v 20 -m 0 -a 0 -A 0 -T a  -F 'ch("../vdb1/zmax")*2' $_obj_geo_isCameraFrustum_vdbactivate2/sizey
chadd -t 0 0 $_obj_geo_isCameraFrustum_vdbactivate2 sizez
chkey -t 0 -v 20 -m 0 -a 0 -A 0 -T a  -F 'ch("../vdb1/zmax")*2' $_obj_geo_isCameraFrustum_vdbactivate2/sizez
chblockend
opparm -V 17.0.416 $_obj_geo_isCameraFrustum_vdbactivate2 size ( sizex sizey sizez ) usevdb ( on )
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo_isCameraFrustum_vdbactivate2
opexprlanguage -s hscript $_obj_geo_isCameraFrustum_vdbactivate2
opuserdata -n '___Version___' -v '17.0.416' $_obj_geo_isCameraFrustum_vdbactivate2

# Node $_obj_geo_isCameraFrustum_OUT (Sop/output)
set _obj_geo_isCameraFrustum_OUT = `run("opadd -e -n -v output OUT")`
oplocate -x `$arg2 + 0` -y `$arg3 + 3.2996249999999998` $_obj_geo_isCameraFrustum_OUT
opcolor -c 0.85000002384185791 0.05000000074505806 0.05000000074505806 $_obj_geo_isCameraFrustum_OUT
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo_isCameraFrustum_OUT
opexprlanguage -s hscript $_obj_geo_isCameraFrustum_OUT
opuserdata -n '___Version___' -v '17.0.416' $_obj_geo_isCameraFrustum_OUT
oporder -e vdb1 vdbactivate2 OUT 
opcf ..
opset -p on $_obj_geo_isCameraFrustum

opcf $arg1
opcf $_obj_geo_isCameraFrustum
opwire -n $_obj_geo_isCameraFrustum_vdb1 -0 $_obj_geo_isCameraFrustum_vdbactivate2
opwire -n $_obj_geo_isCameraFrustum_vdbactivate2 -0 $_obj_geo_isCameraFrustum_OUT
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo_isCameraFrustum
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo_isCameraFrustum
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="add" label="keepOnlyPts" icon="SOP_add">
    <helpURL>operator:Sop/add</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/add</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('add'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_keepOnlyPts (Sop/add)
set _obj_geo1_keepOnlyPts = `run("opadd -e -n -v add keepOnlyPts")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_keepOnlyPts
opparm $_obj_geo1_keepOnlyPts  points ( 1 ) prims ( 1 )
opparm -V 17.0.416 $_obj_geo1_keepOnlyPts keep ( on )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_keepOnlyPts
opexprlanguage -s hscript $_obj_geo1_keepOnlyPts
opuserdata -n '___Version___' -v '17.0.416' $_obj_geo1_keepOnlyPts
opset -p on $_obj_geo1_keepOnlyPts

opcf $arg1
opwire -n $_obj_geo1_sphere1 -0 $_obj_geo1_keepOnlyPts

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_keepOnlyPts
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_keepOnlyPts
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="subnet4" label="enabler" icon="SOP_switch">
    <helpURL>operator:Sop/subnet</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/subnet</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('subnet'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_enabler (Sop/subnet)
set _obj_geo1_enabler = `run("opadd -e -n -v subnet enabler")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_enabler
opspareds '    parm {         name    "label1"         baseparm         label   "Input #1 Label"         invisible         export  all     }     parm {         name    "label2"         baseparm         label   "Input #2 Label"         invisible         export  all     }     parm {         name    "label3"         baseparm         label   "Input #3 Label"         invisible         export  all     }     parm {         name    "label4"         baseparm         label   "Input #4 Label"         invisible         export  all     }     parm {         name    "enable"         label   "enable"         type    float         default { "0" }         range   { 0 10 }     } ' $_obj_geo1_enabler
chblockbegin
chadd -t 40.791666666666664 40.791666666666664 $_obj_geo1_enabler enable
chkey -t 40.791666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F '$F>=1000' $_obj_geo1_enabler/enable
chblockend
opcolor -c 0.15000000596046448 0.34999999403953552 0.75 $_obj_geo1_enabler
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_enabler
opexprlanguage -s hscript $_obj_geo1_enabler
opuserdata -n '___Version___' -v '17.0.416' $_obj_geo1_enabler
opcf $_obj_geo1_enabler

# Node $_obj_geo1_enabler_IN (Sop/null)
set _obj_geo1_enabler_IN = `run("opadd -e -n -v null IN")`
oplocate -x `$arg2 + -1.11759e-08` -y `$arg3 + 4.1536400000000002` $_obj_geo1_enabler_IN
opcolor -c 0.090000003576278687 0.43000000715255737 0.46000000834465027 $_obj_geo1_enabler_IN
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_enabler_IN
opexprlanguage -s hscript $_obj_geo1_enabler_IN
opuserdata -n '___Version___' -v '17.0.416' $_obj_geo1_enabler_IN

# Node $_obj_geo1_enabler_OUT (Sop/output)
set _obj_geo1_enabler_OUT = `run("opadd -e -n -v output OUT")`
oplocate -x `$arg2 + -1.11759e-08` -y `$arg3 + 0.50523899999999999` $_obj_geo1_enabler_OUT
opcolor -c 0.85000002384185791 0.05000000074505806 0.05000000074505806 $_obj_geo1_enabler_OUT
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_enabler_OUT
opexprlanguage -s hscript $_obj_geo1_enabler_OUT
opuserdata -n '___Version___' -v '17.0.416' $_obj_geo1_enabler_OUT

# Node $_obj_geo1_enabler_MRG_IN (Sop/object_merge)
set _obj_geo1_enabler_MRG_IN = `run("opadd -e -n -v object_merge MRG_IN")`
oplocate -x `$arg2 + -0.00125004` -y `$arg3 + 3.0185` $_obj_geo1_enabler_MRG_IN
opparm $_obj_geo1_enabler_MRG_IN  numobj ( 1 )
opparm -V 17.0.416 $_obj_geo1_enabler_MRG_IN xformtype ( local ) objpath1 ( ../IN )
opcolor -c 0.11999999731779099 0.43000000715255737 0.36000001430511475 $_obj_geo1_enabler_MRG_IN
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_enabler_MRG_IN
opexprlanguage -s hscript $_obj_geo1_enabler_MRG_IN
opuserdata -n '___Version___' -v '17.0.416' $_obj_geo1_enabler_MRG_IN

# Node $_obj_geo1_enabler_switch1 (Sop/switch)
set _obj_geo1_enabler_switch1 = `run("opadd -e -n -v switch switch1")`
oplocate -x `$arg2 + -2.0489100000000001e-08` -y `$arg3 + 1.69652` $_obj_geo1_enabler_switch1
chblockbegin
chadd -t 40.791666666666664 40.791666666666664 $_obj_geo1_enabler_switch1 input
chkey -t 40.791666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../enable")' $_obj_geo1_enabler_switch1/input
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_enabler_switch1
opexprlanguage -s hscript $_obj_geo1_enabler_switch1
opuserdata -n '___Version___' -v '17.0.416' $_obj_geo1_enabler_switch1

# Node $_obj_geo1_enabler_null1 (Sop/null)
set _obj_geo1_enabler_null1 = `run("opadd -e -n -v null null1")`
oplocate -x `$arg2 + -2.1024099999999999` -y `$arg3 + 2.7371500000000002` $_obj_geo1_enabler_null1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_enabler_null1
opexprlanguage -s hscript $_obj_geo1_enabler_null1
opuserdata -n '___Version___' -v '17.0.416' $_obj_geo1_enabler_null1
oporder -e IN OUT MRG_IN switch1 null1 
opcf ..
opset -p on $_obj_geo1_enabler

opcf $arg1
opcf $_obj_geo1_enabler
opwire -n -i 0 -0 $_obj_geo1_enabler_IN
opwire -n $_obj_geo1_enabler_switch1 -0 $_obj_geo1_enabler_OUT
opwire -n $_obj_geo1_enabler_null1 -0 $_obj_geo1_enabler_switch1
opwire -n $_obj_geo1_enabler_MRG_IN -1 $_obj_geo1_enabler_switch1
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_enabler
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_enabler
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="timeshift" label="noTimeDependent" icon="SOP_timeshift">
    <helpURL>operator:Sop/timeshift</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/timeshift</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('timeshift'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_noTimeDependent (Sop/timeshift)
set _obj_geo1_noTimeDependent = `run("opadd -e -n -v timeshift noTimeDependent")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_noTimeDependent
chblockbegin
chadd -t 0 0 $_obj_geo1_noTimeDependent time
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$T' $_obj_geo1_noTimeDependent/time
chadd -t 0 0 $_obj_geo1_noTimeDependent frange1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$FSTART' $_obj_geo1_noTimeDependent/frange1
chadd -t 0 0 $_obj_geo1_noTimeDependent frange2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$FEND' $_obj_geo1_noTimeDependent/frange2
chadd -t 0 0 $_obj_geo1_noTimeDependent trange1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$TSTART' $_obj_geo1_noTimeDependent/trange1
chadd -t 0 0 $_obj_geo1_noTimeDependent trange2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$TEND' $_obj_geo1_noTimeDependent/trange2
chblockend
opparm -V 17.0.416 $_obj_geo1_noTimeDependent frame ( 1000 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_noTimeDependent
opexprlanguage -s hscript $_obj_geo1_noTimeDependent
opuserdata -n '___Version___' -v '17.0.416' $_obj_geo1_noTimeDependent
opset -p on $_obj_geo1_noTimeDependent

opcf $arg1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_noTimeDependent
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_noTimeDependent
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="timeshift0" label="clampStartFrame" icon="SOP_timeshift">
    <helpURL>operator:Sop/timeshift</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/timeshift</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('timeshift'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_clampStartFrame (Sop/timeshift)
set _obj_geo1_clampStartFrame = `run("opadd -e -n -v timeshift clampStartFrame")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_clampStartFrame
chblockbegin
chadd -t 0 0 $_obj_geo1_clampStartFrame frame
chkey -t 0 -v 1000 -m 0 -a 0 -A 0 -T a  -F '$F' $_obj_geo1_clampStartFrame/frame
chadd -t 0 0 $_obj_geo1_clampStartFrame time
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$T' $_obj_geo1_clampStartFrame/time
chadd -t 0 0 $_obj_geo1_clampStartFrame frange2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$FEND' $_obj_geo1_clampStartFrame/frange2
chadd -t 0 0 $_obj_geo1_clampStartFrame trange1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$TSTART' $_obj_geo1_clampStartFrame/trange1
chadd -t 0 0 $_obj_geo1_clampStartFrame trange2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$TEND' $_obj_geo1_clampStartFrame/trange2
chblockend
opparm -V 17.0.416 $_obj_geo1_clampStartFrame integerframe ( off ) rangeclamp ( first ) frange ( 1000 frange2 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_clampStartFrame
opexprlanguage -s hscript $_obj_geo1_clampStartFrame
opuserdata -n '___Version___' -v '17.0.416' $_obj_geo1_clampStartFrame
opset -p on $_obj_geo1_clampStartFrame

opcf $arg1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_clampStartFrame
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_clampStartFrame
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="For-Each Named Primitive Compiled" label="For-Each Named Primitive Compiled" icon="SOP_compile_end">
    <toolMenuContext name="network">
      <contextOpType>Sop/compile_begin</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('block_begin'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_example_attribpromote_compile_begin1 (Sop/compile_begin)
set _obj_example_attribpromote_compile_begin1 = `run("opadd -e -n -v compile_begin compile_begin1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_example_attribpromote_compile_begin1
opparm -V 17.0.416 $_obj_example_attribpromote_compile_begin1 blockpath ( ../compile_end1 )
opcolor -c 0.75 0.75 0 $_obj_example_attribpromote_compile_begin1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_example_attribpromote_compile_begin1
opexprlanguage -s hscript $_obj_example_attribpromote_compile_begin1
opuserdata -n '___Version___' -v '17.0.416' $_obj_example_attribpromote_compile_begin1
opset -p on $_obj_example_attribpromote_compile_begin1
opcf $arg1

# Node $_obj_example_attribpromote_compile_end1 (Sop/compile_end)
set _obj_example_attribpromote_compile_end1 = `run("opadd -e -n -v compile_end compile_end1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -4.1473938907637544` $_obj_example_attribpromote_compile_end1
opcolor -c 0.75 0.75 0 $_obj_example_attribpromote_compile_end1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_example_attribpromote_compile_end1
opexprlanguage -s hscript $_obj_example_attribpromote_compile_end1
opuserdata -n '___Version___' -v '17.0.416' $_obj_example_attribpromote_compile_end1
opset -p on $_obj_example_attribpromote_compile_end1
opcf $arg1

# Node $_obj_example_attribpromote_foreach_end1 (Sop/block_end)
set _obj_example_attribpromote_foreach_end1 = `run("opadd -e -n -v block_end foreach_end1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -2.9985834397153033` $_obj_example_attribpromote_foreach_end1
opparm -V 17.0.416 $_obj_example_attribpromote_foreach_end1 itermethod ( pieces ) method ( merge ) class ( primitive ) attrib ( name ) blockpath ( ../foreach_begin1 ) templatepath ( ../foreach_begin1 ) multithread ( on )
opcolor -c 0.75 0.40000000596046448 0 $_obj_example_attribpromote_foreach_end1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_example_attribpromote_foreach_end1
opexprlanguage -s hscript $_obj_example_attribpromote_foreach_end1
opuserdata -n '___Version___' -v '17.0.416' $_obj_example_attribpromote_foreach_end1
opset -p on $_obj_example_attribpromote_foreach_end1
opcf $arg1

# Node $_obj_example_attribpromote_foreach_begin1 (Sop/block_begin)
set _obj_example_attribpromote_foreach_begin1 = `run("opadd -e -n -v block_begin foreach_begin1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -0.99858343971530339` $_obj_example_attribpromote_foreach_begin1
opparm -V 17.0.416 $_obj_example_attribpromote_foreach_begin1 method ( piece ) blockpath ( ../foreach_end1 )
opcolor -c 0.75 0.40000000596046448 0 $_obj_example_attribpromote_foreach_begin1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_example_attribpromote_foreach_begin1
opexprlanguage -s hscript $_obj_example_attribpromote_foreach_begin1
opuserdata -n '___Version___' -v '17.0.416' $_obj_example_attribpromote_foreach_begin1
opset -p on $_obj_example_attribpromote_foreach_begin1

opcf $arg1
opcf $arg1
opwire -n $_obj_example_attribpromote_foreach_end1 -0 $_obj_example_attribpromote_compile_end1
opcf $arg1
opwire -n $_obj_example_attribpromote_foreach_begin1 -0 $_obj_example_attribpromote_foreach_end1
opcf $arg1
opwire -n $_obj_example_attribpromote_compile_begin1 -0 $_obj_example_attribpromote_foreach_begin1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_example_attribpromote_foreach_begin1
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_example_attribpromote_compile_begin1
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribexpression" label="pscaleSimple" icon="SOP_attribexpression">
    <helpURL>operator:Sop/attribexpression</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribexpression</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribexpression'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_visConstraintsAsSpheres_pscaleSimple (Sop/attribexpression)
set _obj_geo1_visConstraintsAsSpheres_pscaleSimple = `run("opadd -e -n -v attribexpression pscaleSimple")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_visConstraintsAsSpheres_pscaleSimple
opparm $_obj_geo1_visConstraintsAsSpheres_pscaleSimple  expressions ( 1 )
opparm $_obj_geo1_visConstraintsAsSpheres_pscaleSimple preset1 ( pscale ) name1 ( pscale ) type1 ( float ) valf_1 ( 1 ) snippet1 ( value )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_visConstraintsAsSpheres_pscaleSimple
opexprlanguage -s hscript $_obj_geo1_visConstraintsAsSpheres_pscaleSimple
opuserdata -n '___Version___' -v '' $_obj_geo1_visConstraintsAsSpheres_pscaleSimple
opset -p on $_obj_geo1_visConstraintsAsSpheres_pscaleSimple

opcf $arg1
opwire -n $_obj_geo1_visConstraintsAsSpheres_attribute1 -0 $_obj_geo1_visConstraintsAsSpheres_pscaleSimple

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_visConstraintsAsSpheres_pscaleSimple
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_visConstraintsAsSpheres_pscaleSimple
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribwrangle10" label="attribwrangle1" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_dopnet1_sopsolver1_subnet1_attribwrangle1 (Sop/attribwrangle)
set _obj_geo1_dopnet1_sopsolver1_subnet1_attribwrangle1 = `run("opadd -e -n -v attribwrangle attribwrangle1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_dopnet1_sopsolver1_subnet1_attribwrangle1
opparm $_obj_geo1_dopnet1_sopsolver1_subnet1_attribwrangle1  bindings ( 0 ) groupbindings ( 0 )
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_dopnet1_sopsolver1_subnet1_attribwrangle1
opexprlanguage -s hscript $_obj_geo1_dopnet1_sopsolver1_subnet1_attribwrangle1
opuserdata -n '___Version___' -v '' $_obj_geo1_dopnet1_sopsolver1_subnet1_attribwrangle1
opset -p on $_obj_geo1_dopnet1_sopsolver1_subnet1_attribwrangle1

opcf $arg1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_dopnet1_sopsolver1_subnet1_attribwrangle1
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_dopnet1_sopsolver1_subnet1_attribwrangle1
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribwrangle12" label="peakByN" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_contraints_subnet1_create_constraints_peakByN (Sop/attribwrangle)
set _obj_contraints_subnet1_create_constraints_peakByN = `run("opadd -e -n -v attribwrangle peakByN")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_contraints_subnet1_create_constraints_peakByN
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "ammount"         label   "Ammount"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "normalize"         label   "Normalize"         type    toggle         default { "0" }         range   { 0 10 }     } ' $_obj_contraints_subnet1_create_constraints_peakByN
opparm $_obj_contraints_subnet1_create_constraints_peakByN  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_contraints_subnet1_create_constraints_peakByN snippet ( 'vector N = v@N;\nif( chi("normalize") )\n{N=normalize(N);}\n\nv@P+= N*chf("ammount");' )
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_contraints_subnet1_create_constraints_peakByN
opexprlanguage -s hscript $_obj_contraints_subnet1_create_constraints_peakByN
opuserdata -n '___Version___' -v '' $_obj_contraints_subnet1_create_constraints_peakByN
opset -p on $_obj_contraints_subnet1_create_constraints_peakByN

opcf $arg1
opwire -n $_obj_contraints_subnet1_create_constraints_scatter1 -0 $_obj_contraints_subnet1_create_constraints_peakByN

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_contraints_subnet1_create_constraints_peakByN
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_contraints_subnet1_create_constraints_peakByN
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="null0" label="IN" icon="SOP_null">
    <helpURL>operator:Sop/null</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/null</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('null'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_edge_displacement_subnet1_IN (Sop/null)
set _obj_edge_displacement_subnet1_IN = `run("opadd -e -n -v null IN")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_edge_displacement_subnet1_IN
opcolor -c 0.18799999356269836 0.52899998426437378 0.45899999141693115 $_obj_edge_displacement_subnet1_IN
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_edge_displacement_subnet1_IN
opexprlanguage -s hscript $_obj_edge_displacement_subnet1_IN
opuserdata -n '___Version___' -v '17.0.416' $_obj_edge_displacement_subnet1_IN
opset -p on $_obj_edge_displacement_subnet1_IN

opcf $arg1
opwire -n -i 0 -0 $_obj_edge_displacement_subnet1_IN

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_edge_displacement_subnet1_IN
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_edge_displacement_subnet1_IN
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="subnet16" label="isGroupPromote" icon="SOP_groupcreate">
    <helpURL>operator:Sop/subnet</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/subnet</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('subnet'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_edge_displacement_subnet1_isGroupPromote (Sop/subnet)
set _obj_edge_displacement_subnet1_isGroupPromote = `run("opadd -e -n -v subnet isGroupPromote")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_edge_displacement_subnet1_isGroupPromote
opspareds '    parm {         name    "label1"         baseparm         label   "Input #1 Label"         invisible         export  dialog     }     parm {         name    "label2"         baseparm         label   "Input #2 Label"         invisible         export  dialog     }     parm {         name    "label3"         baseparm         label   "Input #3 Label"         invisible         export  dialog     }     parm {         name    "label4"         baseparm         label   "Input #4 Label"         invisible         export  dialog     }     parm {         name    "iterations"         label   "Iterations"         type    integer         default { "2" }         range   { 0 10 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "group1"         label   "Group"         type    string         default { "" }         menutoggle {             [ "opmenu -l grouppromote1 group1" ]         }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "fromtype1"         label   "Convert From"         type    ordinal         default { "points" }         menu {             "auto"      "Auto"             "prims"     "Primitives"             "points"    "Points"             "edges"     "Edges"             "vertices"  "Vertices"         }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "totype1"         label   "To"         type    ordinal         default { "prims" }         menu {             "prims"     "Primitives"             "points"    "Points"             "edges"     "Edges"             "vertices"  "Vertices"         }         parmtag { "autoscope" "0000000000000000" }     } ' $_obj_edge_displacement_subnet1_isGroupPromote
opparm -V 17.0.416 $_obj_edge_displacement_subnet1_isGroupPromote iterations ( 1 ) group1 ( inside )
opcolor -c 0.15000000596046448 0.34999999403953552 0.75 $_obj_edge_displacement_subnet1_isGroupPromote
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_edge_displacement_subnet1_isGroupPromote
opexprlanguage -s hscript $_obj_edge_displacement_subnet1_isGroupPromote
opuserdata -n '___Version___' -v '17.0.416' $_obj_edge_displacement_subnet1_isGroupPromote
opcf $_obj_edge_displacement_subnet1_isGroupPromote

# Node $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1 (Sop/grouppromote)
set _obj_edge_displacement_subnet1_isGroupPromote_grouppromote1 = `run("opadd -e -n -v grouppromote grouppromote1")`
oplocate -x `$arg2 + -0.13495499999999999` -y `$arg3 + 2.9776799999999999` $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1
opparm $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1  promotions ( 1 )
chblockbegin
chadd -t 0 0 $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1 fromtype1
chkey -t 0 -v 2 -m 0 -a 0 -A 0 -T a  -F 'ch("../fromtype1")' $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1/fromtype1
chadd -t 0 0 $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1 totype1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../totype1")' $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1/totype1
chadd -t 0 0 $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1 group1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'chs("../group1")' $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1/group1
chblockend
opparm -V 17.0.416 $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1 fromtype1 ( fromtype1 ) totype1 ( totype1 ) group1 ( group1 )
opset -d off -r on -h on -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1
opexprlanguage -s hscript $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1
opuserdata -n '___Version___' -v '17.0.416' $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1

# Node $_obj_edge_displacement_subnet1_isGroupPromote_foreach_end1 (Sop/block_end)
set _obj_edge_displacement_subnet1_isGroupPromote_foreach_end1 = `run("opadd -e -n -v block_end foreach_end1")`
oplocate -x `$arg2 + -0.032203679607158031` -y `$arg3 + 0.20364842269490124` $_obj_edge_displacement_subnet1_isGroupPromote_foreach_end1
chblockbegin
chadd -t 0 0 $_obj_edge_displacement_subnet1_isGroupPromote_foreach_end1 iterations
chkey -t 0 -v 2 -m 0 -a 0 -A 0 -T a  -F 'ch("../iterations")' $_obj_edge_displacement_subnet1_isGroupPromote_foreach_end1/iterations
chblockend
opparm -V 17.0.416 $_obj_edge_displacement_subnet1_isGroupPromote_foreach_end1 itermethod ( count ) iterations ( iterations ) class ( primitive ) attrib ( it ) blockpath ( ../foreach_begin1 ) templatepath ( ../foreach_begin1 )
opcolor -c 0.75 0.40000000596046448 0 $_obj_edge_displacement_subnet1_isGroupPromote_foreach_end1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_edge_displacement_subnet1_isGroupPromote_foreach_end1
opexprlanguage -s hscript $_obj_edge_displacement_subnet1_isGroupPromote_foreach_end1
opuserdata -n '___Version___' -v '17.0.416' $_obj_edge_displacement_subnet1_isGroupPromote_foreach_end1

# Node $_obj_edge_displacement_subnet1_isGroupPromote_foreach_begin1 (Sop/block_begin)
set _obj_edge_displacement_subnet1_isGroupPromote_foreach_begin1 = `run("opadd -e -n -v block_begin foreach_begin1")`
oplocate -x `$arg2 + -0.13495533386236547` -y `$arg3 + 3.9632705018153289` $_obj_edge_displacement_subnet1_isGroupPromote_foreach_begin1
opparm -V 17.0.416 $_obj_edge_displacement_subnet1_isGroupPromote_foreach_begin1 blockpath ( ../foreach_end1 )
opcolor -c 0.75 0.40000000596046448 0 $_obj_edge_displacement_subnet1_isGroupPromote_foreach_begin1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_edge_displacement_subnet1_isGroupPromote_foreach_begin1
opexprlanguage -s hscript $_obj_edge_displacement_subnet1_isGroupPromote_foreach_begin1
opuserdata -n '___Version___' -v '17.0.416' $_obj_edge_displacement_subnet1_isGroupPromote_foreach_begin1

# Node $_obj_edge_displacement_subnet1_isGroupPromote_foreach_count1 (Sop/block_begin)
set _obj_edge_displacement_subnet1_isGroupPromote_foreach_count1 = `run("opadd -e -n -v block_begin foreach_count1")`
oplocate -x `$arg2 + 4.0210007765087186` -y `$arg3 + 3.9632705018153289` $_obj_edge_displacement_subnet1_isGroupPromote_foreach_count1
opparm -V 17.0.416 $_obj_edge_displacement_subnet1_isGroupPromote_foreach_count1 method ( metadata ) blockpath ( ../foreach_end1 )
opcolor -c 0.75 0.40000000596046448 0 $_obj_edge_displacement_subnet1_isGroupPromote_foreach_count1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_edge_displacement_subnet1_isGroupPromote_foreach_count1
opexprlanguage -s hscript $_obj_edge_displacement_subnet1_isGroupPromote_foreach_count1
opuserdata -n '___Version___' -v '17.0.416' $_obj_edge_displacement_subnet1_isGroupPromote_foreach_count1

# Node $_obj_edge_displacement_subnet1_isGroupPromote_IN (Sop/null)
set _obj_edge_displacement_subnet1_isGroupPromote_IN = `run("opadd -e -n -v null IN")`
oplocate -x `$arg2 + -0.13495533386236541` -y `$arg3 + 4.9173709143587461` $_obj_edge_displacement_subnet1_isGroupPromote_IN
opcolor -c 0.18799999356269836 0.52899998426437378 0.45899999141693115 $_obj_edge_displacement_subnet1_isGroupPromote_IN
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_edge_displacement_subnet1_isGroupPromote_IN
opexprlanguage -s hscript $_obj_edge_displacement_subnet1_isGroupPromote_IN
opuserdata -n '___Version___' -v '17.0.416' $_obj_edge_displacement_subnet1_isGroupPromote_IN

# Node $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote3 (Sop/grouppromote)
set _obj_edge_displacement_subnet1_isGroupPromote_grouppromote3 = `run("opadd -e -n -v grouppromote grouppromote3")`
oplocate -x `$arg2 + -0.13495499999999996` -y `$arg3 + 1.7061089292005269` $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote3
opparm $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote3  promotions ( 1 )
chblockbegin
chadd -t 0 0 $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote3 fromtype1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../grouppromote1/totype1")+1' $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote3/fromtype1
chadd -t 0 0 $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote3 totype1
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../grouppromote1/fromtype1")-1' $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote3/totype1
chblockend
opparm -V 17.0.416 $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote3 fromtype1 ( fromtype1 ) totype1 ( totype1 ) group1 ( '`chs("../grouppromote1/group1")`' )
opset -d off -r off -h on -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote3
opexprlanguage -s hscript $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote3
opuserdata -n '___Version___' -v '17.0.416' $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote3

# Node $_obj_edge_displacement_subnet1_isGroupPromote_OUT (Sop/output)
set _obj_edge_displacement_subnet1_isGroupPromote_OUT = `run("opadd -e -n -v output OUT")`
oplocate -x `$arg2 + -0.13495499999999996` -y `$arg3 + -1.7292372665154836` $_obj_edge_displacement_subnet1_isGroupPromote_OUT
opcolor -c 0.85000002384185791 0.05000000074505806 0.05000000074505806 $_obj_edge_displacement_subnet1_isGroupPromote_OUT
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_edge_displacement_subnet1_isGroupPromote_OUT
opexprlanguage -s hscript $_obj_edge_displacement_subnet1_isGroupPromote_OUT
opuserdata -n '___Version___' -v '17.0.416' $_obj_edge_displacement_subnet1_isGroupPromote_OUT
oporder -e grouppromote1 foreach_end1 foreach_begin1 foreach_count1 IN grouppromote3 OUT 
opcf ..
opset -p on $_obj_edge_displacement_subnet1_isGroupPromote

opcf $arg1
opwire -n $_obj_edge_displacement_subnet1_null1 -0 $_obj_edge_displacement_subnet1_isGroupPromote
opcf $_obj_edge_displacement_subnet1_isGroupPromote
opwire -n $_obj_edge_displacement_subnet1_isGroupPromote_foreach_begin1 -0 $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1
opwire -n $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote3 -0 $_obj_edge_displacement_subnet1_isGroupPromote_foreach_end1
opwire -n $_obj_edge_displacement_subnet1_isGroupPromote_IN -0 $_obj_edge_displacement_subnet1_isGroupPromote_foreach_begin1
opwire -n -i 0 -0 $_obj_edge_displacement_subnet1_isGroupPromote_IN
opwire -n $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote1 -0 $_obj_edge_displacement_subnet1_isGroupPromote_grouppromote3
opwire -n $_obj_edge_displacement_subnet1_isGroupPromote_foreach_end1 -0 $_obj_edge_displacement_subnet1_isGroupPromote_OUT
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_edge_displacement_subnet1_isGroupPromote
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_edge_displacement_subnet1_isGroupPromote
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribwrangle13" label="checkDistByXYZ" icon="SOP_measure">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_edge_displacement_subnet1_subnet2_checkDistByXYZ (Sop/attribwrangle)
set _obj_edge_displacement_subnet1_subnet2_checkDistByXYZ = `run("opadd -e -n -v attribwrangle checkDistByXYZ")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_edge_displacement_subnet1_subnet2_checkDistByXYZ
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "max_dist"         label   "Max Dist"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "dist_threshold"         label   "Dist Threshold"         type    float         default { "0" }         range   { 0 1 }     } ' $_obj_edge_displacement_subnet1_subnet2_checkDistByXYZ
opparm $_obj_edge_displacement_subnet1_subnet2_checkDistByXYZ  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_edge_displacement_subnet1_subnet2_checkDistByXYZ class ( primitive ) snippet ( 'int prim;\nvector primuv;\nfloat dist = xyzdist(1,"",v@P,prim,primuv,chf("max_dist"));\n@dist = dist;\n//vector primP = primuv(1,"P",prim,primuv);\n//vector primN = primuv(1,"N",prim,primuv);\n' ) max_dist ( 1 ) dist_threshold ( 0.5 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_edge_displacement_subnet1_subnet2_checkDistByXYZ
opexprlanguage -s hscript $_obj_edge_displacement_subnet1_subnet2_checkDistByXYZ
opuserdata -n '___Version___' -v '' $_obj_edge_displacement_subnet1_subnet2_checkDistByXYZ
opset -p on $_obj_edge_displacement_subnet1_subnet2_checkDistByXYZ

opcf $arg1
opwire -n $_obj_edge_displacement_subnet1_subnet2_blast1 -0 $_obj_edge_displacement_subnet1_subnet2_checkDistByXYZ

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_edge_displacement_subnet1_subnet2_checkDistByXYZ
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_edge_displacement_subnet1_subnet2_checkDistByXYZ
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribwrangle14" label="remeshAttribs" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_edge_displacement_subnet1_subnet2_remeshAttribs (Sop/attribwrangle)
set _obj_edge_displacement_subnet1_subnet2_remeshAttribs = `run("opadd -e -n -v attribwrangle remeshAttribs")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_edge_displacement_subnet1_subnet2_remeshAttribs
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "targetmeshsize"         label   "Targetmeshsize"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "minmeshsize"         label   "Minmeshsize"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "maxmeshsize"         label   "Maxmeshsize"         type    float         default { "0" }         range   { 0 1 }     } ' $_obj_edge_displacement_subnet1_subnet2_remeshAttribs
opparm $_obj_edge_displacement_subnet1_subnet2_remeshAttribs  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_edge_displacement_subnet1_subnet2_remeshAttribs snippet ( 'f@targetmeshsize = chf("targetmeshsize");\nf@minmeshsize = chf("minmeshsize");\nf@maxmeshsize = chf("maxmeshsize");' ) targetmeshsize ( 2 ) minmeshsize ( 2 ) maxmeshsize ( 2 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_edge_displacement_subnet1_subnet2_remeshAttribs
opexprlanguage -s hscript $_obj_edge_displacement_subnet1_subnet2_remeshAttribs
opuserdata -n '___Version___' -v '' $_obj_edge_displacement_subnet1_subnet2_remeshAttribs
opset -p on $_obj_edge_displacement_subnet1_subnet2_remeshAttribs

opcf $arg1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_edge_displacement_subnet1_subnet2_remeshAttribs
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_edge_displacement_subnet1_subnet2_remeshAttribs
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>
</shelfDocument>
