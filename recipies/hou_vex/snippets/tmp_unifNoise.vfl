//
// VEX Code Generated by Houdini 16.0.600
// Date: Wed Jul 19 13:11:53 2017
// File: /server-3d/Project/UrfinJuse2/person_files/Sinyatulov/princesses/icecrystals/icecrystals_grow_v1081
// Node: /obj/crystal_grow/attribvop3
//

#ifndef VOP_OP
#define VOP_OP
#endif
#ifndef VOP_CVEX
#define VOP_CVEX
#endif

#pragma opname attribvop3
#pragma oplabel "Local Vop Code"
#pragma opmininputs 1
#pragma opmaxinputs 1



#include <pyro_utils.h>
#include <pyro_noise.h>

cvex
obj_crystal_grow_attribvop3(export vector P = { 0, 0, 0 })
{
    vector      P_tmp;
    float       noise;
    float       x_avg;
    float       x_oct;
    vector      x_off;
    vector      sum;
    
    // Code produced by: parm1
    P_tmp = P;
    
    // Code produced by: unifiednoise1
    noise    = 0;
    x_avg    = 0;
    x_oct    = 0;
    x_off    = 0;
    
    #if !strcmp("default", f1)
    #define rtype float
    #define ptype float
    #elif !strcmp("default", f2)
    #define rtype float
    #define ptype vector2
    #elif !strcmp("default", default)
    #define rtype float
    #define ptype vector
    #elif !strcmp("default", f4)
    #define rtype float
    #define ptype vector4
    #elif !strcmp("default", fd)
    #define rtype float
    #define ptype vector
    #elif !strcmp("default", fd4)
    #define rtype float
    #define ptype vector4
    #elif !strcmp("default", v1)
    #define rtype vector
    #define ptype float
    #elif !strcmp("default", v2)
    #define rtype vector
    #define ptype vector2
    #elif !strcmp("default", v3)
    #define rtype vector
    #define ptype vector
    #elif !strcmp("default", v4)
    #define rtype vector
    #define ptype vector4
    #elif !strcmp("default", vd)
    #define rtype vector
    #define ptype vector
    #elif !strcmp("default", vd4)
    #define rtype vector
    #define ptype vector4
    #endif
    
    
    if(1)
    {
        float dfreq = 1;
        if("simplex" == "pperlin" || "simplex" == "pflow")
            dfreq = (int)1;
       
        #if !strcmp("default", "fd") || !strcmp("default", "vd")
        int dual = 1;
        ptype p1  = (ptype)(P_tmp.rest * { 1, 1, 1, 1 } - { 0, 0, 0, 0 });
        ptype p2  = (ptype)(P_tmp.rest2 * { 1, 1, 1, 1 } - { 0, 0, 0, 0 });
        float kp1 = P_tmp.rest_ratio;
        float kp2 = P_tmp.rest2_ratio;
        #elif !strcmp("default", "fd4") || !strcmp("default", "vd4")
        int dual = 1;
        ptype p1  = (ptype)P_tmp.rest;
        ptype p2  = (ptype)P_tmp.rest2;
        p1.w = P_tmp.time;
        p2.w = P_tmp.time;
        p1 = p1 * { 1, 1, 1, 1 } - { 0, 0, 0, 0 };
        p2 = p2 * { 1, 1, 1, 1 } - { 0, 0, 0, 0 };
        float kp1 = P_tmp.rest_ratio;
        float kp2 = P_tmp.rest2_ratio;
        #else
        int dual = 0;
        ptype  p1   = (ptype)(P_tmp * { 1, 1, 1, 1 } - { 0, 0, 0, 0 });
        ptype  p2  = (ptype)p1; 
        float   kp1  = 1;
        float   kp2 = 0;
        #endif
    
        ptype  tperiod = (ptype) { 1, 1, 1, 1 };
    
        if(dual) {
        }
    
        #if 0
            float fwidth1  = fw1;
            float fwidth2 = fw1;
        #else
            float fwidth1  = VOPFW(p1);
            float fwidth2 = dual ? VOPFW(p2) : fwidth1;
        #endif
        
        // unified_noise parms which we don't expose, since they're sort
        // of covered by the output correction
        int inv = 0;
        float expon = 1.0;
       
        float fmax = max({ 1, 1, 1, 1 });
        float lw = 0*fmax;
        float fs1 = fwidth1 * 1;
        float fs2 = fwidth2 * 1;
        float e  = max(0,expon);
    
        rtype n1=0, n2=0;
        
        if("fBm" == "none")
        {
            if(kp1>0)  n1 = unified_noise("simplex", p1,inv,0,0,0, fs1,e,tperiod,
                                0,0, lw,dfreq,0,0,
                                x_avg,x_off);
            if(kp2!=0) n2 = unified_noise("simplex", p2,inv,0,0,0, fs2,e,tperiod,
                                0,0, lw,dfreq,0,0,
                                x_avg,x_off);
        }
        else
        {
            //printf("%s\n", "simplex");
            if(kp1>0)  n1 = unified_fractal_noise("fBm", "simplex", p1,inv,0,0,0, fs1,e,tperiod,
                                0,0, lw,dfreq,0,0,
                                x_avg,x_off, //export args
                                8,2.01234,0.5, // fractal args
                                x_oct); // fractal export args
            if(kp2!=0) n2 = unified_fractal_noise("fBm", "simplex", p2,inv,0,0,0, fs2,e,tperiod,
                                0,0, lw,dfreq,0,0,
                                x_avg,x_off, // export args
                                8,2.01234,0.5, // fractal args
                                x_oct); // fractal export args
        }
    
        noise = n1*kp1 + n2*kp2;
    
        noise = noise_cc(noise, 0, 
                           0,{ 0.5, 0.5, 0.5 }, 
                           0,{ 0.5, 0.5, 0.5 }, 
                           0,{ 0, 0, 0 },{ 1, 1, 1 }, { 1, 1, 1 });
    }
    
    #undef rtype
    #undef ptype
    
    // Code produced by: add1
    sum = P_tmp + noise;
    
    // Code produced by: bind1
    P = sum;
}