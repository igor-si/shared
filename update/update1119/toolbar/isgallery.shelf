<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="isgallery_shelf" label="ISGallery">
    <memberTool name="gmManager"/>
    <memberTool name="gmSave"/>
    <memberTool name="gmLoad"/>
    <memberTool name="loadPkg"/>
    <memberTool name="isVersionFromFilecache"/>
  </toolshelf>

  <tool name="gmManager" label="gmManager" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os
import sys

def do(kwargs):
    pane=kwargs['pane']
    if(pane is None or not isinstance(pane,hou.NetworkEditor)):
        return
    return pane
pane = do(kwargs)

print "pane -1",pane

from hutil.Qt import QtWidgets
from isutils.scripts import gallery_tools
reload (gallery_tools)
window = gallery_tools.showManagerWindow(pane)
]]></script>
  </tool>

  <tool name="gmSave" label="gmSave" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os
import sys

from hutil.Qt import QtWidgets
from isutils.scripts import gallery_tools
reload (gallery_tools)
window = gallery_tools.showSaveWindow()
]]></script>
  </tool>

  <tool name="gmLoad" label="gmLoad" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os
import sys

def do(kwargs):
    pane=kwargs['pane']
    if(pane is None or not isinstance(pane,hou.NetworkEditor)):
        return
    return pane
pane = do(kwargs)

#print "pane -1",pane
print "init pane",pane
from hutil.Qt import QtWidgets
from isutils.scripts import gallery_tools
reload (gallery_tools)
window = gallery_tools.showLoadWindow(pane)
]]></script>
  </tool>

  <tool name="loadPkg" label="loadPkg" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os
import sys

def do(kwargs):
    pane=kwargs['pane']
    if(pane is None or not isinstance(pane,hou.NetworkEditor)):
        return
    return pane
pane = do(kwargs)


from isutils.scripts import gallery_tools
reload (gallery_tools)
#print "init pane",pane
gallery_tools.loadPkgDirectly(pane=pane)

#print "pane -1",pane
#from hutil.Qt import QtWidgets
#from isutils.scripts import gallery_tools
#reload (gallery_tools)
#window = gallery_tools.showLoadWindow(pane)
]]></script>
  </tool>

  <tool name="isVersionFromFilecache" label="isVersionFromFilecache" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_isVersionFromFilecache (Sop/attribwrangle)
set _obj_geo1_isVersionFromFilecache = `run("opadd -e -n -v attribwrangle isVersionFromFilecache")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_isVersionFromFilecache
opspareds '    group {         name    "folder2_1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder2_1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      group {         name    "folder2_1_2"         label   "extra"          parm {             name    "sepparm2__"             label   "Separator"             type    separator             default { "" }         }         multiparm {             name    "nodes_dep"             label    "nodes_dep"              parm {                 name    "node_dep#"                 label   "node_dep"                 type    oppath                 default { "" }                 parmtag { "oprelative" "." }             }             parm {                 name    "parms_dep#"                 label   "parms_dep"                 type    string                 default { "version version2 element" }             }             parm {                 name    "sepparm#"                 label   "Separator"                 type    separator                 default { "" }             }         }      }      parm {         name    "result_string"         label   "result_string"         type    string         default { "" }     } ' $_obj_geo1_isVersionFromFilecache
opparm $_obj_geo1_isVersionFromFilecache  bindings ( 0 ) groupbindings ( 0 ) nodes_dep ( 2 )
chblockbegin
chadd -t 0 0 $_obj_geo1_isVersionFromFilecache result_string
chkey -t 0 -v 0 -m 0 -a 0.33333333333333331 -A 0.33333333333333331 -T a  -o mM  -F '#print "\\n"*10\nn = hou.pwd()\nmultiparm_name = "nodes_dep"\nnodes_path = n.parm(multiparm_name).multiParmInstances()\nnodes_path = [x for x in nodes_path if x.eval() != "" and hou.node(x.eval())]\n\nres_list = []\nres_str_comb = ""\nfor node_path in nodes_path:\n    res_str = ""\n    node_dep_pdict = {}\n    node_dep = hou.node(node_path.eval()) or None\n#    if not node_dep:\n#        return\n\n    mb_parm_str = n.parm(node_path.name().replace("node_dep","parms_dep")).eval()\n#    if mb_parm_str == "":\n#        return\n    \n    mb_parm_list = [x for x in mb_parm_str.split(" ") if x != ""]\n\n    for p in mb_parm_list:\n        if p in [x.name() for x in node_dep.parms()]:\n            parm = node_dep.parm(p)\n            if p == "element":\n                res_str+=str(parm.eval())\n            elif p== "version":\n                res_str+="_v{}".format(parm.eval() )\n            elif p== "version2":\n                res_str+="_{}".format(parm.eval() )\n            else:\n                res_str+="__{}{}".format(p,parm.eval())\n    res_str+="___"\n    res_str_comb+=res_str\nreturn res_str_comb[:-3]\n' -l p $_obj_geo1_isVersionFromFilecache/result_string
chblockend
opparm $_obj_geo1_isVersionFromFilecache class ( detail ) snippet ( 's@cache_info = chs("result_string");' ) nodes_dep ( 2 ) result_string ( result_string ) node_dep1 ( ../isFilecache1 ) parms_dep1 ( 'element version version2' ) node_dep2 ( ../isFilecache2 ) parms_dep2 ( 'element version version2 ' )
opcolor -c 0.25907781720161438 0.72899997234344482 0.63253277540206909 $_obj_geo1_isVersionFromFilecache
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_isVersionFromFilecache
opexprlanguage -s hscript $_obj_geo1_isVersionFromFilecache
opuserdata -n '___Version___' -v '' $_obj_geo1_isVersionFromFilecache
opset -p on $_obj_geo1_isVersionFromFilecache

opcf $arg1
opwire -n $_obj_geo1_sphere1 -0 $_obj_geo1_isVersionFromFilecache

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_isVersionFromFilecache
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_isVersionFromFilecache
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>
</shelfDocument>
