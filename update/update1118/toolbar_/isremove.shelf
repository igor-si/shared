<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="isremove_shelf" label="ISRemove">
    <memberTool name="blast_"/>
    <memberTool name="split"/>
    <memberTool name="subnet12_"/>
    <memberTool name="subnet27_"/>
    <memberTool name="subnet28_"/>
    <memberTool name="attribwrangle0_"/>
    <memberTool name="attribwrangle1_"/>
    <memberTool name="attribwrangle3_"/>
    <memberTool name="attribwrangle4_"/>
    <memberTool name="attribwrangle5_"/>
    <memberTool name="attribwrangle6_"/>
    <memberTool name="attribwrangle7_"/>
    <memberTool name="attribwrangle11_"/>
  </toolshelf>

  <tool name="split" label="splitByArea" icon="SOP_split">
    <helpURL>operator:Sop/split</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/split</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('split'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_testgeometry_pighead1_splitByArea (Sop/split)
set _obj_testgeometry_pighead1_splitByArea = `run("opadd -e -n -v split splitByArea")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_testgeometry_pighead1_splitByArea
opspareds '    parm {         name    "group"         baseparm         label   "Group"         export  none         bindselector everything Split             "Select the geometry to keep as first output and press Enter to complete."             0 1 0xffffffff 0 grouptype 0     }     parm {         name    "grouptype"         baseparm         label   "Group Type"         export  none     }     parm {         name    "negate"         baseparm         label   "Invert Selection"         export  none     }     parm {         name    "removegrp"         baseparm         label   "Delete Unused Groups"         export  none     }     parm {         name    "threshold"         label   "threshold"         type    float         default { "0" }         range   { 0 10 }     } ' $_obj_testgeometry_pighead1_splitByArea
opparm $_obj_testgeometry_pighead1_splitByArea group ( '@area<`ch("threshold")`' ) grouptype ( prims ) negate ( on ) threshold ( 0.01 )
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_testgeometry_pighead1_splitByArea
opexprlanguage -s hscript $_obj_testgeometry_pighead1_splitByArea
opuserdata -n '___Version___' -v '' $_obj_testgeometry_pighead1_splitByArea
opset -p on $_obj_testgeometry_pighead1_splitByArea

opcf $arg1
opwire -n $_obj_testgeometry_pighead1_measure1 -0 $_obj_testgeometry_pighead1_splitByArea

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_testgeometry_pighead1_splitByArea
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_testgeometry_pighead1_splitByArea
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribwrangle11_" label="removeByDistXYZ" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_grout_slice_plane_isGrout_removeByDistXYZ (Sop/attribwrangle)
set _obj_grout_slice_plane_isGrout_removeByDistXYZ = `run("opadd -e -n -v attribwrangle removeByDistXYZ")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_grout_slice_plane_isGrout_removeByDistXYZ
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "max_dist"         label   "Max Dist"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "dist_threshold"         label   "Dist Threshold"         type    float         default { "0" }         range   { 0 1 }     } ' $_obj_grout_slice_plane_isGrout_removeByDistXYZ
opparm $_obj_grout_slice_plane_isGrout_removeByDistXYZ  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_grout_slice_plane_isGrout_removeByDistXYZ class ( primitive ) snippet ( 'int prim;\nvector primuv;\nfloat dist = xyzdist(1,"",v@P,prim,primuv,chf("max_dist"));\n//@dist = dist;\nif( dist<chf("dist_threshold")) removeprim(0,@primnum,1);' ) max_dist ( 1 ) dist_threshold ( 0.5 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_grout_slice_plane_isGrout_removeByDistXYZ
opexprlanguage -s hscript $_obj_grout_slice_plane_isGrout_removeByDistXYZ
opuserdata -n '___Version___' -v '' $_obj_grout_slice_plane_isGrout_removeByDistXYZ
opset -p on $_obj_grout_slice_plane_isGrout_removeByDistXYZ

opcf $arg1
opwire -n $_obj_grout_slice_plane_isGrout_fuse1 -0 $_obj_grout_slice_plane_isGrout_removeByDistXYZ
opwire -n $_obj_grout_slice_plane_isGrout_null2 -1 $_obj_grout_slice_plane_isGrout_removeByDistXYZ

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_grout_slice_plane_isGrout_removeByDistXYZ
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_grout_slice_plane_isGrout_removeByDistXYZ
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribwrangle7_" label="removeByAttribute" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_removeByAttribute (Sop/attribwrangle)
set _obj_geo1_removeByAttribute = `run("opadd -e -n -v attribwrangle removeByAttribute")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_removeByAttribute
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "threshold"         label   "Threshold"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "attrib_name"         label   "Attrib Name"         type    string         default { "" }     } ' $_obj_geo1_removeByAttribute
opparm $_obj_geo1_removeByAttribute  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_geo1_removeByAttribute snippet ( 'string attrib_name = chs("attrib_name");\nfloat val = point(0,attrib_name,@ptnum);\n//float val = prim(0,attrib_name,@primnum);\nif (val>chf("threshold"))\n{\n    removepoint(0,@ptnum);\n    //removeprim(0,@primnum,1);\n}' ) threshold ( 0.48599999999999999 ) attrib_name ( prob )
opcolor -c 0.50999999046325684 0.33230477571487427 0.10487333685159683 $_obj_geo1_removeByAttribute
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_removeByAttribute
opexprlanguage -s hscript $_obj_geo1_removeByAttribute
opuserdata -n '___Version___' -v '' $_obj_geo1_removeByAttribute
opset -p on $_obj_geo1_removeByAttribute

opcf $arg1
opwire -n $_obj_geo1_MRG_PTS_DUMMY1 -0 $_obj_geo1_removeByAttribute

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_removeByAttribute
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_removeByAttribute
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribwrangle6_" label="removeDisconnectedPts" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_removeDisconnectedPts (Sop/attribwrangle)
set _obj_geo1_removeDisconnectedPts = `run("opadd -e -n -v attribwrangle removeDisconnectedPts")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_removeDisconnectedPts
opparm $_obj_geo1_removeDisconnectedPts  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_geo1_removeDisconnectedPts snippet ( 'neighbourcount(0,@ptnum) == 0 ? removepoint(0,@ptnum) : 0;' )
opcolor -c 0.50999999046325684 0.33230477571487427 0.10487333685159683 $_obj_geo1_removeDisconnectedPts
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_removeDisconnectedPts
opexprlanguage -s hscript $_obj_geo1_removeDisconnectedPts
opuserdata -n '___Version___' -v '' $_obj_geo1_removeDisconnectedPts
opset -p on $_obj_geo1_removeDisconnectedPts

opcf $arg1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_removeDisconnectedPts
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_removeDisconnectedPts
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribwrangle5_" label="removeByDot" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_removeByDot (Sop/attribwrangle)
set _obj_geo1_removeByDot = `run("opadd -e -n -v attribwrangle removeByDot")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_removeByDot
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "threshold"         label   "Threshold"         type    float         default { "0" }         range   { -1 1 }     } ' $_obj_geo1_removeByDot
opparm $_obj_geo1_removeByDot  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_geo1_removeByDot snippet ( 'vector v1 = v@v;\nvector v2 = {0,1,0};\nif (dot(normalize(v1),normalize(v2) )>chf("threshold"))\n{    removepoint(0,@ptnum);\n//    removeprim(0,@primnum,1);\n}' ) threshold ( -0.48299999999999998 )
opcolor -c 0.50999999046325684 0.33230477571487427 0.10487333685159683 $_obj_geo1_removeByDot
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_removeByDot
opexprlanguage -s hscript $_obj_geo1_removeByDot
opuserdata -n '___Version___' -v '' $_obj_geo1_removeByDot
opset -p on $_obj_geo1_removeByDot

opcf $arg1
opwire -n $_obj_geo1_MRG_PTS_DUMMY -0 $_obj_geo1_removeByDot

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_removeByDot
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_removeByDot
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribwrangle4_" label="removeByPercent" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_removeByPercent (Sop/attribwrangle)
set _obj_geo1_removeByPercent = `run("opadd -e -n -v attribwrangle removeByPercent")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_removeByPercent
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "seed"         label   "Seed"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "threshold"         label   "Threshold"         type    float         default { "0" }         range   { 0 1 }     } ' $_obj_geo1_removeByPercent
opparm $_obj_geo1_removeByPercent  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_geo1_removeByPercent snippet ( 'float counter = float(@ptnum);\nfloat rN = rand(counter+chf("seed") );\nif (rN>=chf("threshold"))\n    removepoint(0,@ptnum);' ) threshold ( 0.54000000000000004 )
opcolor -c 0.50999999046325684 0.33230477571487427 0.10487333685159683 $_obj_geo1_removeByPercent
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_removeByPercent
opexprlanguage -s hscript $_obj_geo1_removeByPercent
opuserdata -n '___Version___' -v '' $_obj_geo1_removeByPercent
opset -p on $_obj_geo1_removeByPercent

opcf $arg1
opwire -n $_obj_geo1_MRG_PTS_DUMMY -0 $_obj_geo1_removeByPercent

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_removeByPercent
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_removeByPercent
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribwrangle3_" label="removeByVolumesample" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_removeByVolumesample (Sop/attribwrangle)
set _obj_geo1_removeByVolumesample = `run("opadd -e -n -v attribwrangle removeByVolumesample")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_removeByVolumesample
opparm $_obj_geo1_removeByVolumesample  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_geo1_removeByVolumesample snippet ( 'float vs = volumesample(1,0,v@P);\nif (vs<0) removepoint(0,@ptnum);' )
opcolor -c 0.50999999046325684 0.33230477571487427 0.10487333685159683 $_obj_geo1_removeByVolumesample
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_removeByVolumesample
opexprlanguage -s hscript $_obj_geo1_removeByVolumesample
opuserdata -n '___Version___' -v '' $_obj_geo1_removeByVolumesample
opset -p on $_obj_geo1_removeByVolumesample

opcf $arg1
opwire -n $_obj_geo1_MRG_PTS_DUMMY -0 $_obj_geo1_removeByVolumesample
opwire -n $_obj_geo1_MRG_VDB_DUMMY -1 $_obj_geo1_removeByVolumesample

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_removeByVolumesample
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_removeByVolumesample
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribwrangle1_" label="removeByNoise" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_integration_removeByNoise (Sop/attribwrangle)
set _obj_integration_removeByNoise = `run("opadd -e -n -v attribwrangle removeByNoise")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_integration_removeByNoise
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "enable_remove"         label   "Enable Remove"         type    toggle         default { "0" }         range   { 0 10 }     }     parm {         name    "enable_Cd"         label   "Enable Cd"         type    toggle         default { "0" }         range   { 0 10 }     }     parm {         name    "amp"         label   "Amp"         type    float         default { "1" }         range   { 0 1 }     }     parm {         name    "dest_min"         label   "Dest Min"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "dest_max"         label   "Dest Max"         type    float         default { "1" }         range   { 0 1 }     }     parm {         name    "freq"         label   "Freq"         type    vector         size    3         default { "8" "8" "8" }         range   { 0 1 }     }     parm {         name    "offset"         label   "Offset"         type    vector         size    3         default { "0" "0" "0" }         range   { 0 1 }     }     parm {         name    "rough"         label   "Rough"         type    float         default { "0.5" }         range   { 0 1 }     }     parm {         name    "atten"         label   "Atten"         type    float         default { "1" }         range   { 0 1 }     }     parm {         name    "pow"         label   "Pow"         type    float         default { "2" }         range   { 0 1 }     }     parm {         name    "rm_probability"         label   "Rm Probability"         type    float         default { "0.5" }         range   { 0 1 }     } ' $_obj_integration_removeByNoise
opparm $_obj_integration_removeByNoise  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_integration_removeByNoise snippet ( 'int doRm = chi("enable_remove");\nint doCd = chi("enable_Cd");\n\nvector noise;\nvector P1=v@P;\nvector freq = chv("freq");\nvector offset = chv("offset");\nfloat rough = chf("rough");\nfloat atten = chf("atten");\nfloat ampTmp = 1.0;\nfloat amp = chf("amp");\nfloat pow = chf("pow");\nfloat rmProb = chf("rm_probability");\nfloat destMin = chf("dest_min");\nfloat destMax = chf("dest_max");\n\nfloat ampSmin = ampTmp*.25*-1.0;\nfloat ampSmax = ampTmp*.75;\n\nnoise = snoise(P1*freq - offset,5,rough,atten)*ampTmp;\nnoise = fit(noise,ampSmin,ampSmax,destMin,destMax)*amp;\nnoise = pow(noise,pow);\n\n//if (doCd) {v@Cd=noise.x;}\nif(noise.x<rmProb && doRm) {removepoint(0,@ptnum);}\n' ) enable_remove ( on ) amp ( 2 ) dest_min ( 0.099000000000000005 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_integration_removeByNoise
opexprlanguage -s hscript $_obj_integration_removeByNoise
opuserdata -n '___Version___' -v '' $_obj_integration_removeByNoise
opset -p on $_obj_integration_removeByNoise

opcf $arg1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_integration_removeByNoise
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_integration_removeByNoise
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="attribwrangle0_" label="removeByAge" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_integration_removeByAge (Sop/attribwrangle)
set _obj_integration_removeByAge = `run("opadd -e -n -v attribwrangle removeByAge")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_integration_removeByAge
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "min_age"         label   "Min Age"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "max_age"         label   "Max Age"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "rand_ramp"         label   "Rand Ramp"         type    ramp_flt         default { "2" }         range   { 1! 10 }     }     parm {         name    "seed"         label   "Seed"         type    integer         default { "0" }         range   { 0 10 }     } ' $_obj_integration_removeByAge
opparm $_obj_integration_removeByAge  bindings ( 0 ) groupbindings ( 0 ) rand_ramp ( 2 )
chblockbegin
chadd -t 40.791666666666664 40.791666666666664 $_obj_integration_removeByAge min_age
chkey -t 40.791666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 4.0/24.0 $_obj_integration_removeByAge/min_age
chadd -t 40.791666666666664 40.791666666666664 $_obj_integration_removeByAge max_age
chkey -t 40.791666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 4.0/24.0 $_obj_integration_removeByAge/max_age
chblockend
opparm $_obj_integration_removeByAge snippet ( '//remove by age\nint id = i@id; \nfloat rN = rand(id+chi("seed"));\nrN = chramp("rand_ramp",rN);\nrN = fit01(rN,chf("min_age"),chf("max_age"));\nif (@age>=rN)\n{removepoint(0,@ptnum);}\n' ) min_age ( min_age ) max_age ( max_age ) rand_ramp2pos ( 1 ) rand_ramp2value ( 1 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_integration_removeByAge
opexprlanguage -s hscript $_obj_integration_removeByAge
opuserdata -n '___Version___' -v '' $_obj_integration_removeByAge
opset -p on $_obj_integration_removeByAge

opcf $arg1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_integration_removeByAge
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_integration_removeByAge
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="subnet28_" label="isSplitByPMaxMin" icon="SOP_subnet">
    <helpURL>operator:Sop/subnet</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/subnet</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('subnet'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin (Sop/subnet)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin = `run("opadd -e -n -v subnet isSplitByPMaxMin")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_fracture_laths_subnet1_isSplitByPMaxMin
opspareds '    parm {         name    "label1"         baseparm         label   "Input #1 Label"         invisible         export  dialog     }     parm {         name    "label2"         baseparm         label   "Input #2 Label"         invisible         export  dialog     }     parm {         name    "label3"         baseparm         label   "Input #3 Label"         invisible         export  dialog     }     parm {         name    "label4"         baseparm         label   "Input #4 Label"         invisible         export  dialog     }     parm {         name    "split"         label   "split"         type    toggle         default { "0" }         range   { 0! 10 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "negate"         label   "Invert Selection"         type    toggle         default { "off" }         range   { 0 1 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "group"         label   "Group"         type    string         default { "pymax" }         menutoggle {             [ "opmenu -l split1 group" ]         }         range   { 0 1 }         parmtag { "autoscope" "0000000000000000" }         parmtag { "script_action" "import soputils\\nkwargs[\'geometrytype\'] = kwargs[\'node\'].parmTuple(\'grouptype\')\\nkwargs[\'inputindex\'] = 0\\nsoputils.selectGroupParm(kwargs)" }         parmtag { "script_action_help" "Select geometry from an available viewport." }         parmtag { "script_action_icon" "BUTTONS_reselect" }     }     parm {         name    "threshold"         label   "Threshold"         type    float         default { "0.001" }         range   { 0 1 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "color"         label   "Color"         type    color         size    3         default { "1" "0" "0" }         hidewhen "{ split == 1 }"         range   { 0 1 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "sepparm"         label   "Separator"         type    separator         default { "" }     }     parm {         name    "remove"         label   "remove"         type    label         default { "" }     }     parm {         name    "group1"         label   "Groups"         type    string         default { "pxmax pxmin pymax pymin pzmax pzmin" }         menutoggle {             [ "opmenu -l groupdelete1 group1" ]         }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "dtldel"         label   "Detail Attributes"         type    string         default { "pmax pmin" }         menutoggle {             [ "opmenu -l attribdelete1 dtldel" ]         }         range   { 0 1 }         parmtag { "autoscope" "0000000000000000" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin
opparm -V 17.5.173 $_obj_fracture_laths_subnet1_isSplitByPMaxMin threshold ( 0.01 )
opcolor -c 0.51800000667572021 0.56099998950958252 0.74099999666213989 $_obj_fracture_laths_subnet1_isSplitByPMaxMin
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByPMaxMin
opcf $_obj_fracture_laths_subnet1_isSplitByPMaxMin

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_compute (Sop/attribwrangle)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_compute = `run("opadd -e -n -v attribwrangle compute")`
oplocate -x `$arg2 + 0.35182084249386492` -y `$arg3 + 1.4810520107676766` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_compute
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "threshold"         label   "Threshold"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_compute
opparm $_obj_fracture_laths_subnet1_isSplitByPMaxMin_compute  bindings ( 0 ) groupbindings ( 0 )
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_compute threshold
chkey -t 39.541666666666664 -v 0.001 -m 0 -a 0 -A 0 -T a  -F 'ch("../threshold")' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_compute/threshold
chblockend
opparm $_obj_fracture_laths_subnet1_isSplitByPMaxMin_compute snippet ( 'float thr = chf("threshold");\nfloat pxmax = vector(detail(0,"pmax")).x;\nfloat pxmin = vector(detail(0,"pmin")).x;\n\nfloat pymax = vector(detail(0,"pmax")).y;\nfloat pymin = vector(detail(0,"pmin")).y;\n\nfloat pzmax = vector(detail(0,"pmax")).z;\nfloat pzmin = vector(detail(0,"pmin")).z;\n\nif (v@P.x>pxmax-thr)@group_pxmax=1;\nif (v@P.x<pxmin+thr)@group_pxmin=1;\n\nif (v@P.y>pymax-thr)@group_pymax=1;\nif (v@P.y<pymin+thr)@group_pymin=1;\n\nif (v@P.z>pzmax-thr)@group_pzmax=1;\nif (v@P.z<pzmin+thr)@group_pzmin=1;\n\n\n\n\n\n\n\n\n\n' ) threshold ( threshold )
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_compute
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_compute
opuserdata -n '___Version___' -v '' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_compute

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1 (Sop/color)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_color1 = `run("opadd -e -n -v color color1")`
oplocate -x `$arg2 + -0.72591945354637799` -y `$arg3 + -1.749768026878094` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1
opspareds '    parm {         name    "group"         baseparm         label   "Group"         export  none         bindselector uveditselect "Assign Colors"             "Select the geometry to apply colors to and press Enter to complete"             0 1 all 0 grouptype 0     }     parm {         name    "grouptype"         baseparm         label   "Group Type"         export  none     }     parm {         name    "deleteallcolorattribs"         baseparm         label   "Delete All Existing Color Attributes"         export  none     }     parm {         name    "class"         baseparm         label   "Class"         export  all     }     parm {         name    "colortype"         baseparm         label   "Color Type"         export  all     }     parm {         name    "color"         baseparm         label   "Color"         export  all     }     parm {         name    "seed"         baseparm         label   "Seed"         export  none     }     parm {         name    "rampattribute"         baseparm         label   "Attribute"         export  none     }     parm {         name    "ramprange"         baseparm         label   "Range"         export  none     }     parm {         name    "ramp"         baseparm         label   "Attribute Ramp"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1
opparm $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1  ramp ( 2 )
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1 colorr
chkey -t 39.541666666666664 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../colorr")' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1/colorr
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1 colorg
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../colorg")' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1/colorg
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1 colorb
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../colorb")' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1/colorb
chblockend
opparm $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1 group ( '`chs("../split1/group")`' ) color ( colorr colorg colorb ) rampattribute ( it ) ramp2pos ( 1 ) ramp2c ( 1 1 1 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1
opuserdata -n '___Version___' -v '' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1
opuserdata -n '___toolcount___' -v '2' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1
opuserdata -n '___toolid___' -v 'sop_color' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2 (Sop/color)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_color2 = `run("opadd -e -n -v color color2")`
oplocate -x `$arg2 + 1.234544570365659` -y `$arg3 + -1.6595247401653483` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2
opspareds '    parm {         name    "group"         baseparm         label   "Group"         export  none         bindselector uveditselect "Assign Colors"             "Select the geometry to apply colors to and press Enter to complete"             0 1 all 0 grouptype 0     }     parm {         name    "grouptype"         baseparm         label   "Group Type"         export  none     }     parm {         name    "deleteallcolorattribs"         baseparm         label   "Delete All Existing Color Attributes"         export  none     }     parm {         name    "class"         baseparm         label   "Class"         export  all     }     parm {         name    "colortype"         baseparm         label   "Color Type"         export  all     }     parm {         name    "color"         baseparm         label   "Color"         export  all     }     parm {         name    "seed"         baseparm         label   "Seed"         export  none     }     parm {         name    "rampattribute"         baseparm         label   "Attribute"         export  none     }     parm {         name    "ramprange"         baseparm         label   "Range"         export  none     }     parm {         name    "ramp"         baseparm         label   "Attribute Ramp"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2
opparm $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2  ramp ( 2 )
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2 colorr
chkey -t 39.541666666666664 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../colorr")' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2/colorr
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2 colorg
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../colorg")' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2/colorg
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2 colorb
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../colorb")' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2/colorb
chblockend
opparm $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2 group ( '!`chs("../split1/group")`' ) color ( colorr colorg colorb ) rampattribute ( it ) ramp2pos ( 1 ) ramp2c ( 1 1 1 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2
opuserdata -n '___Version___' -v '' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2
opuserdata -n '___toolcount___' -v '2' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2
opuserdata -n '___toolid___' -v 'sop_color' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2
opcf ..
opcf $_obj_fracture_laths_subnet1_isSplitByPMaxMin

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null1 (Sop/null)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_null1 = `run("opadd -e -n -v null null1")`
oplocate -x `$arg2 + 0.20388899999999999` -y `$arg3 + 4.5783670000000001` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null1
opspareds '    parm {         name    "copyinput"         baseparm         label   "Copy Input (Note: Input will be still cooked if disabled)"         export  none     }     parm {         name    "cacheinput"         baseparm         label   "Cache Input"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null1
opset -d off -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null1
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null1

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote1 (Sop/attribpromote)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote1 = `run("opadd -e -n -v attribpromote attribpromote1")`
oplocate -x `$arg2 + 0.22760787979756003` -y `$arg3 + 3.485100360374898` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote1
opspareds '    parm {         name    "inname"         baseparm         label   "Original Name"         export  all     }     parm {         name    "inclass"         baseparm         label   "Original Class"         export  all     }     parm {         name    "outclass"         baseparm         label   "New Class"         export  all     }     parm {         name    "usepieceattrib"         baseparm         label   "Use Piece Attribute"         nolabel         joinnext         export  none     }     parm {         name    "pieceattrib"         baseparm         label   "Piece Attribute"         export  none     }     parm {         name    "method"         baseparm         label   "Promotion Method"         export  all     }     parm {         name    "useoutname"         baseparm         label   "Change New Name"         export  none     }     parm {         name    "outname"         baseparm         label   "New Name"         export  none     }     parm {         name    "deletein"         baseparm         label   "Delete Original"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote1
opparm -V 17.5.173 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote1 inname ( P ) outclass ( detail ) method ( max ) useoutname ( on ) outname ( pmax ) deletein ( off )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote1
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote1

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote2 (Sop/attribpromote)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote2 = `run("opadd -e -n -v attribpromote attribpromote2")`
oplocate -x `$arg2 + 0.25654306492062773` -y `$arg3 + 2.447934718780914` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote2
opspareds '    parm {         name    "inname"         baseparm         label   "Original Name"         export  all     }     parm {         name    "inclass"         baseparm         label   "Original Class"         export  all     }     parm {         name    "outclass"         baseparm         label   "New Class"         export  all     }     parm {         name    "usepieceattrib"         baseparm         label   "Use Piece Attribute"         nolabel         joinnext         export  none     }     parm {         name    "pieceattrib"         baseparm         label   "Piece Attribute"         export  none     }     parm {         name    "method"         baseparm         label   "Promotion Method"         export  all     }     parm {         name    "useoutname"         baseparm         label   "Change New Name"         export  none     }     parm {         name    "outname"         baseparm         label   "New Name"         export  none     }     parm {         name    "deletein"         baseparm         label   "Delete Original"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote2
opparm -V 17.5.173 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote2 inname ( P ) outclass ( detail ) method ( min ) useoutname ( on ) outname ( pmin ) deletein ( off )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote2
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote2
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote2

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split1 (Sop/split)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_split1 = `run("opadd -e -n -v split split1")`
oplocate -x `$arg2 + -3.0095395618126806` -y `$arg3 + -0.48328954880132918` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split1
opspareds '    parm {         name    "group"         baseparm         label   "Group"         export  none         bindselector everything Split             "Select the geometry to keep as first output and press Enter to complete."             0 1 0xffffffff 0 grouptype 0     }     parm {         name    "grouptype"         baseparm         label   "Group Type"         export  none     }     parm {         name    "negate"         baseparm         label   "Invert Selection"         export  none     }     parm {         name    "removegrp"         baseparm         label   "Delete Unused Groups"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split1
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split1 group
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'chs("../group")' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split1/group
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split1 negate
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../negate")' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split1/negate
chblockend
opparm $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split1 group ( group ) negate ( negate )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split1
opuserdata -n '___Version___' -v '' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split1

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split (Sop/switch)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_split = `run("opadd -e -n -v switch split")`
oplocate -x `$arg2 + -2.4976302693588215` -y `$arg3 + -3.5097680512351781` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split
opspareds '    parm {         name    "input"         baseparm         label   "Select Input"         export  all     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split input
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../split")' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split/input
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT (Sop/output)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT = `run("opadd -e -n -v output OUT")`
oplocate -x `$arg2 + -2.5164059894831246` -y `$arg3 + -6.5375458647161118` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT
opspareds '    parm {         name    "outputidx"         baseparm         label   "Output Index"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT
opcolor -c 0.85000002384185791 0.05000000074505806 0.05000000074505806 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT1 (Sop/output)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT1 = `run("opadd -e -n -v output OUT1")`
oplocate -x `$arg2 + 4.4084396746631267` -y `$arg3 + -5.6530237686292377` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT1
opspareds '    parm {         name    "outputidx"         baseparm         label   "Output Index"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT1
opparm -V 17.5.173 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT1 outputidx ( 1 )
opcolor -c 0.85000002384185791 0.05000000074505806 0.05000000074505806 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT1
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT1

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null2 (Sop/null)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_null2 = `run("opadd -e -n -v null null2")`
oplocate -x `$arg2 + 4.4551217733283428` -y `$arg3 + -1.4740114259611654` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null2
opspareds '    parm {         name    "copyinput"         baseparm         label   "Copy Input (Note: Input will be still cooked if disabled)"         export  none     }     parm {         name    "cacheinput"         baseparm         label   "Cache Input"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null2
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null2
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null2
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null2

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete1 (Sop/groupdelete)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete1 = `run("opadd -e -n -v groupdelete groupdelete1")`
oplocate -x `$arg2 + -2.5059893228388201` -y `$arg3 + -4.5375458408742517` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete1
opspareds '    multiparm {         name    "deletions"         label    "Number of Deletions"         baseparm         default 1          parm {             name    "enable#"             baseparm             label   "Enable"             nolabel             export  none         }         parm {             name    "grouptype#"             baseparm             label   "Group Type"             export  none         }         parm {             name    "group#"             baseparm             label   "Groups"             export  none         }     }      parm {         name    "removegrp"         baseparm         label   "Delete Unused Groups"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete1
opparm $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete1  deletions ( 1 )
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete1 group1
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'chs("../group1")' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete1/group1
chblockend
opparm -V 17.5.173 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete1 grouptype1 ( points ) group1 ( group1 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete1
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete1

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete1 (Sop/attribdelete)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete1 = `run("opadd -e -n -v attribdelete attribdelete1")`
oplocate -x `$arg2 + -2.5539984585382234` -y `$arg3 + -5.5182557293798027` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete1
opspareds '    parm {         name    "ptdel"         baseparm         label   "Point Attributes"         export  none     }     parm {         name    "vtxdel"         baseparm         label   "Vertex Attributes"         export  none     }     parm {         name    "primdel"         baseparm         label   "Primitive Attributes"         export  none     }     parm {         name    "dtldel"         baseparm         label   "Detail Attributes"         export  none     }     parm {         name    "updatevar"         baseparm         label   "Update Local Variables"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete1
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete1 dtldel
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'chs("../dtldel")' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete1/dtldel
chblockend
opparm $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete1 dtldel ( dtldel )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete1
opuserdata -n '___Version___' -v '' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete1

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete2 (Sop/groupdelete)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete2 = `run("opadd -e -n -v groupdelete groupdelete2")`
oplocate -x `$arg2 + 4.4121280697169381` -y `$arg3 + -3.5116211806337563` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete2
opspareds '    multiparm {         name    "deletions"         label    "Number of Deletions"         baseparm         default 1          parm {             name    "enable#"             baseparm             label   "Enable"             nolabel             export  none         }         parm {             name    "grouptype#"             baseparm             label   "Group Type"             export  none         }         parm {             name    "group#"             baseparm             label   "Groups"             export  none         }     }      parm {         name    "removegrp"         baseparm         label   "Delete Unused Groups"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete2
opparm $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete2  deletions ( 1 )
opparm -V 17.5.173 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete2 grouptype1 ( points ) group1 ( '`chs("../groupdelete1/group1")`' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete2
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete2
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete2

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete2 (Sop/attribdelete)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete2 = `run("opadd -e -n -v attribdelete attribdelete2")`
oplocate -x `$arg2 + 4.4226990573485656` -y `$arg3 + -4.5019761308469972` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete2
opspareds '    parm {         name    "ptdel"         baseparm         label   "Point Attributes"         export  none     }     parm {         name    "vtxdel"         baseparm         label   "Vertex Attributes"         export  none     }     parm {         name    "primdel"         baseparm         label   "Primitive Attributes"         export  none     }     parm {         name    "dtldel"         baseparm         label   "Detail Attributes"         export  none     }     parm {         name    "updatevar"         baseparm         label   "Update Local Variables"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete2
opparm $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete2 dtldel ( '`chs("../attribdelete1/dtldel")`' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete2
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete2
opuserdata -n '___Version___' -v '' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete2

# Node $_obj_fracture_laths_subnet1_isSplitByPMaxMin_switch1 (Sop/switch)
set _obj_fracture_laths_subnet1_isSplitByPMaxMin_switch1 = `run("opadd -e -n -v switch switch1")`
oplocate -x `$arg2 + 0.41454457212601559` -y `$arg3 + -2.9097680384555384` $_obj_fracture_laths_subnet1_isSplitByPMaxMin_switch1
opspareds '    parm {         name    "input"         baseparm         label   "Select Input"         export  all     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111714"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_switch1
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_switch1 input
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../split1/negate")' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_switch1/input
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByPMaxMin_switch1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByPMaxMin_switch1
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByPMaxMin_switch1
oporder -e null1 attribpromote1 attribpromote2 compute color1 split1 split OUT OUT1 null2 groupdelete1 attribdelete1 groupdelete2 attribdelete2 switch1 color2 
opcf ..
opset -p on $_obj_fracture_laths_subnet1_isSplitByPMaxMin

opcf $arg1
opwire -n $_obj_fracture_laths_subnet1_attribpromote1 -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin
opcf $_obj_fracture_laths_subnet1_isSplitByPMaxMin
opwire -n -i 0 -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null1
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null1 -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote1
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote1 -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote2
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribpromote2 -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_compute
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_compute -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_compute -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split1
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_switch1 -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split1 -1 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete1 -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete2 -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_OUT1
opwire -n -o 1 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split1 -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null2
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_split -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete1
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete1 -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete1
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_null2 -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete2
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_groupdelete2 -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_attribdelete2
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color1 -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_switch1
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2 -1 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_switch1
opwire -n $_obj_fracture_laths_subnet1_isSplitByPMaxMin_compute -0 $_obj_fracture_laths_subnet1_isSplitByPMaxMin_color2
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_fracture_laths_subnet1_isSplitByPMaxMin
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_fracture_laths_subnet1_isSplitByPMaxMin
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="subnet27_" label="isSplitByValue" icon="SOP_split">
    <helpURL>operator:Sop/subnet</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/subnet</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('subnet'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_fracture_laths_subnet1_isSplitByValue (Sop/subnet)
set _obj_fracture_laths_subnet1_isSplitByValue = `run("opadd -e -n -v subnet isSplitByValue")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_fracture_laths_subnet1_isSplitByValue
opspareds '    parm {         name    "label1"         baseparm         label   "Input #1 Label"         invisible         export  dialog     }     parm {         name    "label2"         baseparm         label   "Input #2 Label"         invisible         export  dialog     }     parm {         name    "label3"         baseparm         label   "Input #3 Label"         invisible         export  dialog     }     parm {         name    "label4"         baseparm         label   "Input #4 Label"         invisible         export  dialog     }     parm {         name    "inname"         label   "Original Name"         type    string         default { "area" }         menutoggle {             [ "opmenu -l attribpromote1 inname" ]         }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "inclass"         label   "Original Class"         type    ordinal         default { "primitive" }         menu {             "detail"    "Detail"             "primitive" "Primitive"             "point"     "Point"             "vertex"    "Vertex"         }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "method"         label   "Promotion Method"         type    ordinal         default { "max" }         menu {             "max"       "Maximum"             "min"       "Minimum"             "mean"      "Average"             "mode"      "Mode"             "median"    "Median"             "sum"       "Sum"             "sumsquare" "Sum of Squares"             "rms"       "Root Mean Square"             "first"     "First Match"             "last"      "Last Match"         }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "negate"         label   "Invert Selection"         type    toggle         default { "off" }         range   { 0 1 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "split"         label   "split"         type    toggle         default { "0" }         range   { 0! 10 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "do_color"         label   "do_color"         type    toggle         default { "0" }         hidewhen "{ split == 1 }"         range   { 0! 10 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "color"         label   "Color"         type    color         size    3         default { "1" "0" "0" }         hidewhen "{ split == 1 }"         range   { 0 1 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "sepparm"         label   "Separator"         type    separator         default { "" }     }     parm {         name    "remove"         label   "remove"         type    label         default { "" }     }     parm {         name    "group1"         label   "Groups"         type    string         default { "__split" }         menutoggle {             [ "opmenu -l groupdelete1 group1" ]         }         parmtag { "autoscope" "0000000000000000" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue
opparm -V 17.5.173 $_obj_fracture_laths_subnet1_isSplitByValue split ( on ) do_color ( on )
opcolor -c 0.37999999523162842 0.40799999237060547 0.55299997329711914 $_obj_fracture_laths_subnet1_isSplitByValue
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByValue
opcf $_obj_fracture_laths_subnet1_isSplitByValue

# Node $_obj_fracture_laths_subnet1_isSplitByValue_primitivewrangle1 (Sop/attribwrangle)
set _obj_fracture_laths_subnet1_isSplitByValue_primitivewrangle1 = `run("opadd -e -n -v attribwrangle primitivewrangle1")`
oplocate -x `$arg2 + -1.8821065958053766` -y `$arg3 + 2.5066174796593477` $_obj_fracture_laths_subnet1_isSplitByValue_primitivewrangle1
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "threshold"         label   "Threshold"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "mode"         label   "Mode"         type    integer         default { "0" }         range   { 0 10 }     }     parm {         name    "attrib_name"         label   "Attrib Name"         type    string         default { "" }     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_primitivewrangle1
opparm $_obj_fracture_laths_subnet1_isSplitByValue_primitivewrangle1  bindings ( 0 ) groupbindings ( 0 )
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_primitivewrangle1 mode
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../attribpromote1/method")' $_obj_fracture_laths_subnet1_isSplitByValue_primitivewrangle1/mode
chblockend
opparm $_obj_fracture_laths_subnet1_isSplitByValue_primitivewrangle1 class ( primitive ) snippet ( 'float split = detail(0,"__split");\nint mode = chi("mode");\nfloat threshold = chf("threshold");\nfloat val = prim(0,chs("attrib_name"),@primnum);\n@t = threshold;\nif (mode==0)\n{\n    if(val>split*(1.0-threshold))\n    {@group___split=1;}\n}\n\nif (mode==1)\n{\n    if(val<split*(1.0+threshold))\n    {@group___split=1;}\n}\n\n\nif (mode==2)\n{\n    if(val<split*(1.0+threshold) && val>split*(1.0-threshold) )\n    {@group___split=1;}\n}\n\n/*\nif (@group___split==1)\nv@Cd = {1,0,0};\n*/\n' ) threshold ( 0.01 ) mode ( mode ) attrib_name ( '`chs("../attribpromote1/inname")`' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_primitivewrangle1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_primitivewrangle1
opuserdata -n '___Version___' -v '' $_obj_fracture_laths_subnet1_isSplitByValue_primitivewrangle1

# Node $_obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1 (Sop/attribwrangle)
set _obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1 = `run("opadd -e -n -v attribwrangle attribwrangle1")`
oplocate -x `$arg2 + 1.3971368257163159` -y `$arg3 + 2.6307590772538925` $_obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "threshold"         label   "Threshold"         type    float         default { "0" }         range   { 0 1 }     }     parm {         name    "mode"         label   "Mode"         type    integer         default { "0" }         range   { 0 10 }     }     parm {         name    "attrib_name"         label   "Attrib Name"         type    string         default { "" }     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1
opparm $_obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1  bindings ( 0 ) groupbindings ( 0 )
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1 threshold
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../primitivewrangle1/threshold")' $_obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1/threshold
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1 mode
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../primitivewrangle1/mode")' $_obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1/mode
chblockend
opparm $_obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1 snippet ( 'float split = detail(0,"__split");\nint mode = chi("mode");\nfloat threshold = chf("threshold");\nfloat val = point(0,chs("attrib_name"),@ptnum);\n@t = threshold;\nif (mode==0)\n{\n    if(val>split*(1.0-threshold))\n    {@group___split=1;}\n}\n\nif (mode==1)\n{\n    if(val<split*(1.0+threshold))\n    {@group___split=1;}\n}\n\n\nif (mode==2)\n{\n    if(val<split*(1.0+threshold) && val>split*(1.0-threshold) )\n    {@group___split=1;}\n}\n\n/*if (@group___split==1)\nv@Cd = {1,0,0};\n*/\n' ) threshold ( threshold ) mode ( mode ) attrib_name ( '`chs("../primitivewrangle1/attrib_name")`' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1
opuserdata -n '___Version___' -v '' $_obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1

# Node $_obj_fracture_laths_subnet1_isSplitByValue_color1 (Sop/color)
set _obj_fracture_laths_subnet1_isSplitByValue_color1 = `run("opadd -e -n -v color color1")`
oplocate -x `$arg2 + -0.21881809890609549` -y `$arg3 + -1.4000817096209563` $_obj_fracture_laths_subnet1_isSplitByValue_color1
opspareds '    parm {         name    "group"         baseparm         label   "Group"         export  none         bindselector uveditselect "Assign Colors"             "Select the geometry to apply colors to and press Enter to complete"             0 1 all 0 grouptype 0     }     parm {         name    "grouptype"         baseparm         label   "Group Type"         export  none     }     parm {         name    "deleteallcolorattribs"         baseparm         label   "Delete All Existing Color Attributes"         export  none     }     parm {         name    "class"         baseparm         label   "Class"         export  all     }     parm {         name    "colortype"         baseparm         label   "Color Type"         export  all     }     parm {         name    "color"         baseparm         label   "Color"         export  all     }     parm {         name    "seed"         baseparm         label   "Seed"         export  none     }     parm {         name    "rampattribute"         baseparm         label   "Attribute"         export  none     }     parm {         name    "ramprange"         baseparm         label   "Range"         export  none     }     parm {         name    "ramp"         baseparm         label   "Attribute Ramp"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_color1
opparm $_obj_fracture_laths_subnet1_isSplitByValue_color1  ramp ( 2 )
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_color1 class
chkey -t 39.541666666666664 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../color2/class")' $_obj_fracture_laths_subnet1_isSplitByValue_color1/class
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_color1 colorr
chkey -t 39.541666666666664 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../color2/colorr")' $_obj_fracture_laths_subnet1_isSplitByValue_color1/colorr
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_color1 colorg
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../color2/colorg")' $_obj_fracture_laths_subnet1_isSplitByValue_color1/colorg
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_color1 colorb
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../color2/colorb")' $_obj_fracture_laths_subnet1_isSplitByValue_color1/colorb
chblockend
opparm $_obj_fracture_laths_subnet1_isSplitByValue_color1 group ( !__split ) class ( class ) color ( colorr colorg colorb ) rampattribute ( it ) ramp2pos ( 1 ) ramp2c ( 1 1 1 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_color1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_color1
opuserdata -n '___Version___' -v '' $_obj_fracture_laths_subnet1_isSplitByValue_color1
opuserdata -n '___toolcount___' -v '2' $_obj_fracture_laths_subnet1_isSplitByValue_color1
opuserdata -n '___toolid___' -v 'sop_color' $_obj_fracture_laths_subnet1_isSplitByValue_color1

# Node $_obj_fracture_laths_subnet1_isSplitByValue_color2 (Sop/color)
set _obj_fracture_laths_subnet1_isSplitByValue_color2 = `run("opadd -e -n -v color color2")`
oplocate -x `$arg2 + -1.9907451204783631` -y `$arg3 + -1.4702074858789818` $_obj_fracture_laths_subnet1_isSplitByValue_color2
opspareds '    parm {         name    "group"         baseparm         label   "Group"         export  none         bindselector uveditselect "Assign Colors"             "Select the geometry to apply colors to and press Enter to complete"             0 1 all 0 grouptype 0     }     parm {         name    "grouptype"         baseparm         label   "Group Type"         export  none     }     parm {         name    "deleteallcolorattribs"         baseparm         label   "Delete All Existing Color Attributes"         export  none     }     parm {         name    "class"         baseparm         label   "Class"         export  all     }     parm {         name    "colortype"         baseparm         label   "Color Type"         export  all     }     parm {         name    "color"         baseparm         label   "Color"         export  all     }     parm {         name    "seed"         baseparm         label   "Seed"         export  none     }     parm {         name    "rampattribute"         baseparm         label   "Attribute"         export  none     }     parm {         name    "ramprange"         baseparm         label   "Range"         export  none     }     parm {         name    "ramp"         baseparm         label   "Attribute Ramp"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_color2
opparm $_obj_fracture_laths_subnet1_isSplitByValue_color2  ramp ( 2 )
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_color2 class
chkey -t 39.541666666666664 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../attribpromote1/inclass")' $_obj_fracture_laths_subnet1_isSplitByValue_color2/class
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_color2 colorr
chkey -t 39.541666666666664 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../colorr")' $_obj_fracture_laths_subnet1_isSplitByValue_color2/colorr
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_color2 colorg
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../colorg")' $_obj_fracture_laths_subnet1_isSplitByValue_color2/colorg
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_color2 colorb
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../colorb")' $_obj_fracture_laths_subnet1_isSplitByValue_color2/colorb
chblockend
opparm $_obj_fracture_laths_subnet1_isSplitByValue_color2 group ( __split ) class ( class ) color ( colorr colorg colorb ) rampattribute ( it ) ramp2pos ( 1 ) ramp2c ( 1 1 1 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_color2
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_color2
opuserdata -n '___Version___' -v '' $_obj_fracture_laths_subnet1_isSplitByValue_color2
opuserdata -n '___toolcount___' -v '2' $_obj_fracture_laths_subnet1_isSplitByValue_color2
opuserdata -n '___toolid___' -v 'sop_color' $_obj_fracture_laths_subnet1_isSplitByValue_color2
opcf ..
opcf $_obj_fracture_laths_subnet1_isSplitByValue

# Node $_obj_fracture_laths_subnet1_isSplitByValue_null1 (Sop/null)
set _obj_fracture_laths_subnet1_isSplitByValue_null1 = `run("opadd -e -n -v null null1")`
oplocate -x `$arg2 + 0.0074339309779860099` -y `$arg3 + 4.8736786890998287` $_obj_fracture_laths_subnet1_isSplitByValue_null1
opspareds '    parm {         name    "copyinput"         baseparm         label   "Copy Input (Note: Input will be still cooked if disabled)"         export  none     }     parm {         name    "cacheinput"         baseparm         label   "Cache Input"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_null1
opset -d off -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_null1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_null1
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByValue_null1

# Node $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1 (Sop/attribpromote)
set _obj_fracture_laths_subnet1_isSplitByValue_attribpromote1 = `run("opadd -e -n -v attribpromote attribpromote1")`
oplocate -x `$arg2 + -0.018126437110496621` -y `$arg3 + 3.9182537495418042` $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1
opspareds '    parm {         name    "inname"         baseparm         label   "Original Name"         export  all     }     parm {         name    "inclass"         baseparm         label   "Original Class"         export  all     }     parm {         name    "outclass"         baseparm         label   "New Class"         export  all     }     parm {         name    "usepieceattrib"         baseparm         label   "Use Piece Attribute"         nolabel         joinnext         export  none     }     parm {         name    "pieceattrib"         baseparm         label   "Piece Attribute"         export  none     }     parm {         name    "method"         baseparm         label   "Promotion Method"         export  all     }     parm {         name    "useoutname"         baseparm         label   "Change New Name"         export  none     }     parm {         name    "outname"         baseparm         label   "New Name"         export  none     }     parm {         name    "deletein"         baseparm         label   "Delete Original"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1 inname
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'chs("../inname")' $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1/inname
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1 inclass
chkey -t 39.541666666666664 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../inclass")' $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1/inclass
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1 method
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../method")' $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1/method
chblockend
opparm -V 17.5.173 $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1 inname ( inname ) inclass ( inclass ) outclass ( detail ) method ( method ) useoutname ( on ) outname ( __split ) deletein ( off )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1

# Node $_obj_fracture_laths_subnet1_isSplitByValue_split1 (Sop/split)
set _obj_fracture_laths_subnet1_isSplitByValue_split1 = `run("opadd -e -n -v split split1")`
oplocate -x `$arg2 + 0.59292514341853431` -y `$arg3 + 0.09072769543677961` $_obj_fracture_laths_subnet1_isSplitByValue_split1
opspareds '    parm {         name    "group"         baseparm         label   "Group"         export  none         bindselector everything Split             "Select the geometry to keep as first output and press Enter to complete."             0 1 0xffffffff 0 grouptype 0     }     parm {         name    "grouptype"         baseparm         label   "Group Type"         export  none     }     parm {         name    "negate"         baseparm         label   "Invert Selection"         export  none     }     parm {         name    "removegrp"         baseparm         label   "Delete Unused Groups"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_split1
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_split1 negate
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../negate")' $_obj_fracture_laths_subnet1_isSplitByValue_split1/negate
chblockend
opparm $_obj_fracture_laths_subnet1_isSplitByValue_split1 group ( __split ) negate ( negate )
chautoscope $_obj_fracture_laths_subnet1_isSplitByValue_split1 +grouptype
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_split1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_split1
opuserdata -n '___Version___' -v '' $_obj_fracture_laths_subnet1_isSplitByValue_split1

# Node $_obj_fracture_laths_subnet1_isSplitByValue_OUT (Sop/output)
set _obj_fracture_laths_subnet1_isSplitByValue_OUT = `run("opadd -e -n -v output OUT")`
oplocate -x `$arg2 + -6.8734787592210038` -y `$arg3 + -7.5357085104522019` $_obj_fracture_laths_subnet1_isSplitByValue_OUT
opspareds '    parm {         name    "outputidx"         baseparm         label   "Output Index"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_OUT
opcolor -c 0.85000002384185791 0.05000000074505806 0.05000000074505806 $_obj_fracture_laths_subnet1_isSplitByValue_OUT
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_OUT
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_OUT
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByValue_OUT

# Node $_obj_fracture_laths_subnet1_isSplitByValue_OUT1 (Sop/output)
set _obj_fracture_laths_subnet1_isSplitByValue_OUT1 = `run("opadd -e -n -v output OUT1")`
oplocate -x `$arg2 + 2.7675246766869486` -y `$arg3 + -2.993105644434765` $_obj_fracture_laths_subnet1_isSplitByValue_OUT1
opspareds '    parm {         name    "outputidx"         baseparm         label   "Output Index"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_OUT1
opparm -V 17.5.173 $_obj_fracture_laths_subnet1_isSplitByValue_OUT1 outputidx ( 1 )
opcolor -c 0.85000002384185791 0.05000000074505806 0.05000000074505806 $_obj_fracture_laths_subnet1_isSplitByValue_OUT1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_OUT1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_OUT1
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByValue_OUT1

# Node $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1 (Sop/switch)
set _obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1 = `run("opadd -e -n -v switch prim_or_point1")`
oplocate -x `$arg2 + -0.13773462415096599` -y `$arg3 + 1.2273427328848496` $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1
opspareds '    parm {         name    "input"         baseparm         label   "Select Input"         export  all     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1 input
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../attribpromote1/inclass")' $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1/input
chblockend
opparm -V 17.5.173 $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1 input ( input )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1

# Node $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete1 (Sop/attribdelete)
set _obj_fracture_laths_subnet1_isSplitByValue_attribdelete1 = `run("opadd -e -n -v attribdelete attribdelete1")`
oplocate -x `$arg2 + -6.8578097110626866` -y `$arg3 + -5.5357084866103436` $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete1
opspareds '    parm {         name    "ptdel"         baseparm         label   "Point Attributes"         export  none     }     parm {         name    "vtxdel"         baseparm         label   "Vertex Attributes"         export  none     }     parm {         name    "primdel"         baseparm         label   "Primitive Attributes"         export  none     }     parm {         name    "dtldel"         baseparm         label   "Detail Attributes"         export  none     }     parm {         name    "updatevar"         baseparm         label   "Update Local Variables"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete1
opparm $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete1 dtldel ( __split )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete1
opuserdata -n '___Version___' -v '' $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete1

# Node $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete2 (Sop/attribdelete)
set _obj_fracture_laths_subnet1_isSplitByValue_attribdelete2 = `run("opadd -e -n -v attribdelete attribdelete2")`
oplocate -x `$arg2 + 2.8094915712359567` -y `$arg3 + -0.94664351602548513` $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete2
opspareds '    parm {         name    "ptdel"         baseparm         label   "Point Attributes"         export  none     }     parm {         name    "vtxdel"         baseparm         label   "Vertex Attributes"         export  none     }     parm {         name    "primdel"         baseparm         label   "Primitive Attributes"         export  none     }     parm {         name    "dtldel"         baseparm         label   "Detail Attributes"         export  none     }     parm {         name    "updatevar"         baseparm         label   "Update Local Variables"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete2
opparm $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete2 dtldel ( __split )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete2
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete2
opuserdata -n '___Version___' -v '' $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete2

# Node $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete1 (Sop/groupdelete)
set _obj_fracture_laths_subnet1_isSplitByValue_groupdelete1 = `run("opadd -e -n -v groupdelete groupdelete1")`
oplocate -x `$arg2 + -6.8424255050505876` -y `$arg3 + -6.5357084985312728` $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete1
opspareds '    multiparm {         name    "deletions"         label    "Number of Deletions"         baseparm         default 1          parm {             name    "enable#"             baseparm             label   "Enable"             nolabel             export  none         }         parm {             name    "grouptype#"             baseparm             label   "Group Type"             export  none         }         parm {             name    "group#"             baseparm             label   "Groups"             export  none         }     }      parm {         name    "removegrp"         baseparm         label   "Delete Unused Groups"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete1
opparm $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete1  deletions ( 1 )
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete1 group1
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'chs("../group1")' $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete1/group1
chblockend
opparm -V 17.5.173 $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete1 group1 ( group1 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete1
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete1
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete1

# Node $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete2 (Sop/groupdelete)
set _obj_fracture_laths_subnet1_isSplitByValue_groupdelete2 = `run("opadd -e -n -v groupdelete groupdelete2")`
oplocate -x `$arg2 + 2.7501645034158129` -y `$arg3 + -1.961386156600422` $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete2
opspareds '    multiparm {         name    "deletions"         label    "Number of Deletions"         baseparm         default 1          parm {             name    "enable#"             baseparm             label   "Enable"             nolabel             export  none         }         parm {             name    "grouptype#"             baseparm             label   "Group Type"             export  none         }         parm {             name    "group#"             baseparm             label   "Groups"             export  none         }     }      parm {         name    "removegrp"         baseparm         label   "Delete Unused Groups"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete2
opparm $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete2  deletions ( 1 )
opparm -V 17.5.173 $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete2 group1 ( '`chs("../groupdelete1/group1")`' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete2
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete2
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete2

# Node $_obj_fracture_laths_subnet1_isSplitByValue_remove (Sop/switch)
set _obj_fracture_laths_subnet1_isSplitByValue_remove = `run("opadd -e -n -v switch remove")`
oplocate -x `$arg2 + -6.7533517439742932` -y `$arg3 + -4.5782184214759054` $_obj_fracture_laths_subnet1_isSplitByValue_remove
opspareds '    parm {         name    "input"         baseparm         label   "Select Input"         export  all     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_remove
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_remove input
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../split")' $_obj_fracture_laths_subnet1_isSplitByValue_remove/input
chblockend
opparm -V 17.5.173 $_obj_fracture_laths_subnet1_isSplitByValue_remove input ( input )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_remove
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_remove
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByValue_remove

# Node $_obj_fracture_laths_subnet1_isSplitByValue_null2 (Sop/null)
set _obj_fracture_laths_subnet1_isSplitByValue_null2 = `run("opadd -e -n -v null null2")`
oplocate -x `$arg2 + -6.7095657000532567` -y `$arg3 + -0.99441371115816524` $_obj_fracture_laths_subnet1_isSplitByValue_null2
opspareds '    parm {         name    "copyinput"         baseparm         label   "Copy Input (Note: Input will be still cooked if disabled)"         export  none     }     parm {         name    "cacheinput"         baseparm         label   "Cache Input"         export  none     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_null2
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_null2
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_null2
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByValue_null2

# Node $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point (Sop/switch)
set _obj_fracture_laths_subnet1_isSplitByValue_prim_or_point = `run("opadd -e -n -v switch prim_or_point")`
oplocate -x `$arg2 + -1.3985828695423739` -y `$arg3 + -2.7244195519300618` $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point
opspareds '    parm {         name    "input"         baseparm         label   "Select Input"         export  all     }     parm {         name    "creator"         label   "createdbyigorsi 20191117"         type    label         invisible         default { "" }     }     parm {         name    "legend"         label   "ver1.0 | upd111713"         type    label         default { "" }     } ' $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point input
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../split1/negate")' $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point/input
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point

# Node $_obj_fracture_laths_subnet1_isSplitByValue_color_it (Sop/switch)
set _obj_fracture_laths_subnet1_isSplitByValue_color_it = `run("opadd -e -n -v switch color_it")`
oplocate -x `$arg2 + -1.5262276148955318` -y `$arg3 + -3.7244195638509905` $_obj_fracture_laths_subnet1_isSplitByValue_color_it
chblockbegin
chadd -t 39.541666666666664 39.541666666666664 $_obj_fracture_laths_subnet1_isSplitByValue_color_it input
chkey -t 39.541666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../do_color")' $_obj_fracture_laths_subnet1_isSplitByValue_color_it/input
chblockend
opparm -V 17.5.173 $_obj_fracture_laths_subnet1_isSplitByValue_color_it input ( input )
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_color_it
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_color_it
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByValue_color_it

# Node $_obj_fracture_laths_subnet1_isSplitByValue_zero (Sop/null)
set _obj_fracture_laths_subnet1_isSplitByValue_zero = `run("opadd -e -n -v null zero")`
oplocate -x `$arg2 + -4.6742702534813816` -y `$arg3 + -2.6051395367857562` $_obj_fracture_laths_subnet1_isSplitByValue_zero
opcolor -c 0.3059999942779541 0.3059999942779541 0.3059999942779541 $_obj_fracture_laths_subnet1_isSplitByValue_zero
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_fracture_laths_subnet1_isSplitByValue_zero
opexprlanguage -s hscript $_obj_fracture_laths_subnet1_isSplitByValue_zero
opuserdata -n '___Version___' -v '17.5.173' $_obj_fracture_laths_subnet1_isSplitByValue_zero
oporder -e null1 attribpromote1 primitivewrangle1 split1 OUT OUT1 attribwrangle1 prim_or_point1 attribdelete1 attribdelete2 groupdelete1 groupdelete2 remove color1 null2 color2 prim_or_point color_it zero 
opcf ..
opset -p on $_obj_fracture_laths_subnet1_isSplitByValue

opcf $arg1
opwire -n $_obj_fracture_laths_subnet1_measure1 -0 $_obj_fracture_laths_subnet1_isSplitByValue
opcf $_obj_fracture_laths_subnet1_isSplitByValue
opwire -n -i 0 -0 $_obj_fracture_laths_subnet1_isSplitByValue_null1
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_null1 -0 $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1 -0 $_obj_fracture_laths_subnet1_isSplitByValue_primitivewrangle1
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1 -0 $_obj_fracture_laths_subnet1_isSplitByValue_split1
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete1 -0 $_obj_fracture_laths_subnet1_isSplitByValue_OUT
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete2 -0 $_obj_fracture_laths_subnet1_isSplitByValue_OUT1
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_attribpromote1 -0 $_obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_primitivewrangle1 -0 $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_primitivewrangle1 -1 $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_attribwrangle1 -2 $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_remove -0 $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete1
opwire -n -o 1 $_obj_fracture_laths_subnet1_isSplitByValue_split1 -0 $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete2
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete1 -0 $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete1
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_attribdelete2 -0 $_obj_fracture_laths_subnet1_isSplitByValue_groupdelete2
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_color_it -0 $_obj_fracture_laths_subnet1_isSplitByValue_remove
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_null2 -1 $_obj_fracture_laths_subnet1_isSplitByValue_remove
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1 -0 $_obj_fracture_laths_subnet1_isSplitByValue_color1
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_split1 -0 $_obj_fracture_laths_subnet1_isSplitByValue_null2
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1 -0 $_obj_fracture_laths_subnet1_isSplitByValue_color2
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_color2 -0 $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_color1 -1 $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_zero -0 $_obj_fracture_laths_subnet1_isSplitByValue_color_it
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point -1 $_obj_fracture_laths_subnet1_isSplitByValue_color_it
opwire -n $_obj_fracture_laths_subnet1_isSplitByValue_prim_or_point1 -0 $_obj_fracture_laths_subnet1_isSplitByValue_zero
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_fracture_laths_subnet1_isSplitByValue
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_fracture_laths_subnet1_isSplitByValue
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="subnet12_" label="splitByAreaComputed" icon="SOP_split">
    <helpURL>operator:Sop/subnet</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/subnet</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('subnet'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_grout_slice_plane_splitByAreaComputed (Sop/subnet)
set _obj_grout_slice_plane_splitByAreaComputed = `run("opadd -e -n -v subnet splitByAreaComputed")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_grout_slice_plane_splitByAreaComputed
opspareds '    parm {         name    "label1"         baseparm         label   "Input #1 Label"         invisible         export  dialog     }     parm {         name    "label2"         baseparm         label   "Input #2 Label"         invisible         export  dialog     }     parm {         name    "label3"         baseparm         label   "Input #3 Label"         invisible         export  dialog     }     parm {         name    "label4"         baseparm         label   "Input #4 Label"         invisible         export  dialog     }     parm {         name    "attrib"         label   "Piece Attribute"         type    string         default { "it" }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "compute_connectivity"         label   "compute_connectivity"         type    toggle         default { "0" }         range   { 0! 10 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "negate"         label   "Invert Selection"         type    toggle         default { "on" }         range   { 0 1 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "threshold"         label   "threshold"         type    float         default { "1" }         range   { 0 10 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "sepparm"         label   "Separator"         type    separator         default { "" }     }     parm {         name    "primdel"         label   "Primitive Attributes"         type    string         default { "" }         menutoggle {             [ "opmenu -l attribdelete1 primdel" ]         }         range   { 0 1 }         parmtag { "autoscope" "0000000000000000" }     } ' $_obj_grout_slice_plane_splitByAreaComputed
opparm -V 17.0.416 $_obj_grout_slice_plane_splitByAreaComputed primdel ( 'area area_sum' )
opcolor -c 0.15000000596046448 0.34999999403953552 0.75 $_obj_grout_slice_plane_splitByAreaComputed
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed
opuserdata -n '___Version___' -v '17.0.416' $_obj_grout_slice_plane_splitByAreaComputed
opcf $_obj_grout_slice_plane_splitByAreaComputed

# Node $_obj_grout_slice_plane_splitByAreaComputed_null1 (Sop/null)
set _obj_grout_slice_plane_splitByAreaComputed_null1 = `run("opadd -e -n -v null null1")`
oplocate -x `$arg2 + -0.024548` -y `$arg3 + 4.5238800000000001` $_obj_grout_slice_plane_splitByAreaComputed_null1
opset -d off -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_null1
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_null1
opuserdata -n '___Version___' -v '17.0.416' $_obj_grout_slice_plane_splitByAreaComputed_null1

# Node $_obj_grout_slice_plane_splitByAreaComputed_compile_begin1 (Sop/compile_begin)
set _obj_grout_slice_plane_splitByAreaComputed_compile_begin1 = `run("opadd -e -n -v compile_begin compile_begin1")`
oplocate -x `$arg2 + -0.024547999999999959` -y `$arg3 + 1.1214596809886634` $_obj_grout_slice_plane_splitByAreaComputed_compile_begin1
opparm -V 17.0.416 $_obj_grout_slice_plane_splitByAreaComputed_compile_begin1 blockpath ( ../compile_end1 )
opcolor -c 0.75 0.75 0 $_obj_grout_slice_plane_splitByAreaComputed_compile_begin1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_compile_begin1
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_compile_begin1
opuserdata -n '___Version___' -v '17.0.416' $_obj_grout_slice_plane_splitByAreaComputed_compile_begin1

# Node $_obj_grout_slice_plane_splitByAreaComputed_compile_end1 (Sop/compile_end)
set _obj_grout_slice_plane_splitByAreaComputed_compile_end1 = `run("opadd -e -n -v compile_end compile_end1")`
oplocate -x `$arg2 + -0.024548000000000014` -y `$arg3 + -4.8785403905369096` $_obj_grout_slice_plane_splitByAreaComputed_compile_end1
opcolor -c 0.75 0.75 0 $_obj_grout_slice_plane_splitByAreaComputed_compile_end1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_compile_end1
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_compile_end1
opuserdata -n '___Version___' -v '17.0.416' $_obj_grout_slice_plane_splitByAreaComputed_compile_end1

# Node $_obj_grout_slice_plane_splitByAreaComputed_foreach_end1 (Sop/block_end)
set _obj_grout_slice_plane_splitByAreaComputed_foreach_end1 = `run("opadd -e -n -v block_end foreach_end1")`
oplocate -x `$arg2 + -0.024548000000000014` -y `$arg3 + -3.8785403786159804` $_obj_grout_slice_plane_splitByAreaComputed_foreach_end1
chblockbegin
chadd -t 0 0 $_obj_grout_slice_plane_splitByAreaComputed_foreach_end1 attrib
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'chs("../attrib")' $_obj_grout_slice_plane_splitByAreaComputed_foreach_end1/attrib
chblockend
opparm -V 17.0.416 $_obj_grout_slice_plane_splitByAreaComputed_foreach_end1 itermethod ( pieces ) method ( merge ) class ( primitive ) attrib ( attrib ) blockpath ( ../foreach_begin1 ) templatepath ( ../foreach_begin1 ) multithread ( on )
opcolor -c 0.75 0.40000000596046448 0 $_obj_grout_slice_plane_splitByAreaComputed_foreach_end1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_foreach_end1
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_foreach_end1
opuserdata -n '___Version___' -v '17.0.416' $_obj_grout_slice_plane_splitByAreaComputed_foreach_end1

# Node $_obj_grout_slice_plane_splitByAreaComputed_foreach_begin1 (Sop/block_begin)
set _obj_grout_slice_plane_splitByAreaComputed_foreach_begin1 = `run("opadd -e -n -v block_begin foreach_begin1")`
oplocate -x `$arg2 + -0.024547999999999959` -y `$arg3 + 0.1214596690677352` $_obj_grout_slice_plane_splitByAreaComputed_foreach_begin1
opparm -V 17.0.416 $_obj_grout_slice_plane_splitByAreaComputed_foreach_begin1 method ( piece ) blockpath ( ../foreach_end1 )
opcolor -c 0.75 0.40000000596046448 0 $_obj_grout_slice_plane_splitByAreaComputed_foreach_begin1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_foreach_begin1
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_foreach_begin1
opuserdata -n '___Version___' -v '17.0.416' $_obj_grout_slice_plane_splitByAreaComputed_foreach_begin1

# Node $_obj_grout_slice_plane_splitByAreaComputed_compute_connectivity (Sop/switch)
set _obj_grout_slice_plane_splitByAreaComputed_compute_connectivity = `run("opadd -e -n -v switch compute_connectivity")`
oplocate -x `$arg2 + -0.024548000000000014` -y `$arg3 + 2.2926189732427265` $_obj_grout_slice_plane_splitByAreaComputed_compute_connectivity
chblockbegin
chadd -t 0 0 $_obj_grout_slice_plane_splitByAreaComputed_compute_connectivity input
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../compute_connectivity")' $_obj_grout_slice_plane_splitByAreaComputed_compute_connectivity/input
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_compute_connectivity
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_compute_connectivity
opuserdata -n '___Version___' -v '17.0.416' $_obj_grout_slice_plane_splitByAreaComputed_compute_connectivity

# Node $_obj_grout_slice_plane_splitByAreaComputed_connectivity1 (Sop/connectivity)
set _obj_grout_slice_plane_splitByAreaComputed_connectivity1 = `run("opadd -e -n -v connectivity connectivity1")`
oplocate -x `$arg2 + 1.7964277770772195` -y `$arg3 + 3.2670934456252212` $_obj_grout_slice_plane_splitByAreaComputed_connectivity1
opparm -V 17.0.416 $_obj_grout_slice_plane_splitByAreaComputed_connectivity1 connecttype ( prim ) attribname ( '`chs("../foreach_end1/attrib")`' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_connectivity1
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_connectivity1
opuserdata -n '___Version___' -v '17.0.416' $_obj_grout_slice_plane_splitByAreaComputed_connectivity1

# Node $_obj_grout_slice_plane_splitByAreaComputed_attribpromote1 (Sop/attribpromote)
set _obj_grout_slice_plane_splitByAreaComputed_attribpromote1 = `run("opadd -e -n -v attribpromote attribpromote1")`
oplocate -x `$arg2 + -0.024548000000000014` -y `$arg3 + -1.8785403547741231` $_obj_grout_slice_plane_splitByAreaComputed_attribpromote1
opparm -V 17.0.416 $_obj_grout_slice_plane_splitByAreaComputed_attribpromote1 inname ( '`chs("../measure1/attribname")`' ) inclass ( primitive ) outclass ( detail ) method ( sum ) deletein ( off )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_attribpromote1
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_attribpromote1
opuserdata -n '___Version___' -v '17.0.416' $_obj_grout_slice_plane_splitByAreaComputed_attribpromote1

# Node $_obj_grout_slice_plane_splitByAreaComputed_measure1 (Sop/measure)
set _obj_grout_slice_plane_splitByAreaComputed_measure1 = `run("opadd -e -n -v measure measure1")`
oplocate -x `$arg2 + -0.024548000000000014` -y `$arg3 + -0.87854034285319393` $_obj_grout_slice_plane_splitByAreaComputed_measure1
opparm -V 17.0.416 $_obj_grout_slice_plane_splitByAreaComputed_measure1 type ( area ) override ( on )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_measure1
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_measure1
opuserdata -n '___Version___' -v '17.0.416' $_obj_grout_slice_plane_splitByAreaComputed_measure1

# Node $_obj_grout_slice_plane_splitByAreaComputed_attribpromote2 (Sop/attribpromote)
set _obj_grout_slice_plane_splitByAreaComputed_attribpromote2 = `run("opadd -e -n -v attribpromote attribpromote2")`
oplocate -x `$arg2 + -0.024548000000000014` -y `$arg3 + -2.8785403666950513` $_obj_grout_slice_plane_splitByAreaComputed_attribpromote2
opparm -V 17.0.416 $_obj_grout_slice_plane_splitByAreaComputed_attribpromote2 inname ( '`chs("../attribpromote1/inname")`' ) inclass ( detail ) outclass ( primitive ) method ( first ) useoutname ( on ) outname ( '`chs("inname")`_sum' ) deletein ( off )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_attribpromote2
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_attribpromote2
opuserdata -n '___Version___' -v '17.0.416' $_obj_grout_slice_plane_splitByAreaComputed_attribpromote2

# Node $_obj_grout_slice_plane_splitByAreaComputed_splitByArea (Sop/split)
set _obj_grout_slice_plane_splitByAreaComputed_splitByArea = `run("opadd -e -n -v split splitByArea")`
oplocate -x `$arg2 + -0.024548000000000014` -y `$arg3 + -6.7905810579893195` $_obj_grout_slice_plane_splitByAreaComputed_splitByArea
opspareds '    parm {         name    "group"         baseparm         label   "Group"         export  none         bindselector everything Split             "Select the geometry to keep as first output and press Enter to complete."             0 1 0xffffffff 0 grouptype 0     }     parm {         name    "grouptype"         baseparm         label   "Group Type"         export  none     }     parm {         name    "negate"         baseparm         label   "Invert Selection"         export  none     }     parm {         name    "removegrp"         baseparm         label   "Delete Unused Groups"         export  none     }     parm {         name    "threshold"         label   "threshold"         type    float         default { "0" }         range   { 0 10 }     } ' $_obj_grout_slice_plane_splitByAreaComputed_splitByArea
chblockbegin
chadd -t 0 0 $_obj_grout_slice_plane_splitByAreaComputed_splitByArea negate
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../negate")' $_obj_grout_slice_plane_splitByAreaComputed_splitByArea/negate
chadd -t 0 0 $_obj_grout_slice_plane_splitByAreaComputed_splitByArea threshold
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../threshold")' $_obj_grout_slice_plane_splitByAreaComputed_splitByArea/threshold
chblockend
opparm $_obj_grout_slice_plane_splitByAreaComputed_splitByArea group ( '@area_sum<`ch("threshold")`' ) grouptype ( prims ) negate ( negate ) threshold ( threshold )
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_splitByArea
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_splitByArea
opuserdata -n '___Version___' -v '' $_obj_grout_slice_plane_splitByAreaComputed_splitByArea

# Node $_obj_grout_slice_plane_splitByAreaComputed_output1 (Sop/output)
set _obj_grout_slice_plane_splitByAreaComputed_output1 = `run("opadd -e -n -v output output1")`
oplocate -x `$arg2 + -1.431868692518254` -y `$arg3 + -9.9532093707150011` $_obj_grout_slice_plane_splitByAreaComputed_output1
opcolor -c 1 0.72500002384185791 0 $_obj_grout_slice_plane_splitByAreaComputed_output1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_output1
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_output1
opuserdata -n '___Version___' -v '17.0.416' $_obj_grout_slice_plane_splitByAreaComputed_output1

# Node $_obj_grout_slice_plane_splitByAreaComputed_output2 (Sop/output)
set _obj_grout_slice_plane_splitByAreaComputed_output2 = `run("opadd -e -n -v output output2")`
oplocate -x `$arg2 + 2.176648995208311` -y `$arg3 + -9.9532093707150011` $_obj_grout_slice_plane_splitByAreaComputed_output2
opparm -V 17.0.416 $_obj_grout_slice_plane_splitByAreaComputed_output2 outputidx ( 1 )
opcolor -c 1 0.72500002384185791 0 $_obj_grout_slice_plane_splitByAreaComputed_output2
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_output2
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_output2
opuserdata -n '___Version___' -v '17.0.416' $_obj_grout_slice_plane_splitByAreaComputed_output2

# Node $_obj_grout_slice_plane_splitByAreaComputed_attribdelete1 (Sop/attribdelete)
set _obj_grout_slice_plane_splitByAreaComputed_attribdelete1 = `run("opadd -e -n -v attribdelete attribdelete1")`
oplocate -x `$arg2 + -1.431868692518254` -y `$arg3 + -8.7284582200428229` $_obj_grout_slice_plane_splitByAreaComputed_attribdelete1
chblockbegin
chadd -t 0 0 $_obj_grout_slice_plane_splitByAreaComputed_attribdelete1 primdel
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'chs("../primdel")' $_obj_grout_slice_plane_splitByAreaComputed_attribdelete1/primdel
chblockend
opparm $_obj_grout_slice_plane_splitByAreaComputed_attribdelete1 primdel ( primdel )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_attribdelete1
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_attribdelete1
opuserdata -n '___Version___' -v '' $_obj_grout_slice_plane_splitByAreaComputed_attribdelete1

# Node $_obj_grout_slice_plane_splitByAreaComputed_attribdelete2 (Sop/attribdelete)
set _obj_grout_slice_plane_splitByAreaComputed_attribdelete2 = `run("opadd -e -n -v attribdelete attribdelete2")`
oplocate -x `$arg2 + 2.1766489952083106` -y `$arg3 + -8.7284582200428229` $_obj_grout_slice_plane_splitByAreaComputed_attribdelete2
opparm $_obj_grout_slice_plane_splitByAreaComputed_attribdelete2 primdel ( '`chs("../attribdelete1/primdel")`' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_grout_slice_plane_splitByAreaComputed_attribdelete2
opexprlanguage -s hscript $_obj_grout_slice_plane_splitByAreaComputed_attribdelete2
opuserdata -n '___Version___' -v '' $_obj_grout_slice_plane_splitByAreaComputed_attribdelete2
oporder -e null1 compile_begin1 compile_end1 foreach_end1 foreach_begin1 compute_connectivity connectivity1 attribpromote1 measure1 attribpromote2 splitByArea output1 output2 attribdelete1 attribdelete2 
opcf ..
opset -p on $_obj_grout_slice_plane_splitByAreaComputed

opcf $arg1
opwire -n $_obj_grout_slice_plane_attribdelete1 -0 $_obj_grout_slice_plane_splitByAreaComputed
opcf $_obj_grout_slice_plane_splitByAreaComputed
opwire -n -i 0 -0 $_obj_grout_slice_plane_splitByAreaComputed_null1
opwire -n $_obj_grout_slice_plane_splitByAreaComputed_compute_connectivity -0 $_obj_grout_slice_plane_splitByAreaComputed_compile_begin1
opwire -n $_obj_grout_slice_plane_splitByAreaComputed_foreach_end1 -0 $_obj_grout_slice_plane_splitByAreaComputed_compile_end1
opwire -n $_obj_grout_slice_plane_splitByAreaComputed_attribpromote2 -0 $_obj_grout_slice_plane_splitByAreaComputed_foreach_end1
opwire -n $_obj_grout_slice_plane_splitByAreaComputed_compile_begin1 -0 $_obj_grout_slice_plane_splitByAreaComputed_foreach_begin1
opwire -n $_obj_grout_slice_plane_splitByAreaComputed_null1 -0 $_obj_grout_slice_plane_splitByAreaComputed_compute_connectivity
opwire -n $_obj_grout_slice_plane_splitByAreaComputed_connectivity1 -1 $_obj_grout_slice_plane_splitByAreaComputed_compute_connectivity
opwire -n $_obj_grout_slice_plane_splitByAreaComputed_null1 -0 $_obj_grout_slice_plane_splitByAreaComputed_connectivity1
opwire -n $_obj_grout_slice_plane_splitByAreaComputed_measure1 -0 $_obj_grout_slice_plane_splitByAreaComputed_attribpromote1
opwire -n $_obj_grout_slice_plane_splitByAreaComputed_foreach_begin1 -0 $_obj_grout_slice_plane_splitByAreaComputed_measure1
opwire -n $_obj_grout_slice_plane_splitByAreaComputed_attribpromote1 -0 $_obj_grout_slice_plane_splitByAreaComputed_attribpromote2
opwire -n $_obj_grout_slice_plane_splitByAreaComputed_compile_end1 -0 $_obj_grout_slice_plane_splitByAreaComputed_splitByArea
opwire -n $_obj_grout_slice_plane_splitByAreaComputed_attribdelete1 -0 $_obj_grout_slice_plane_splitByAreaComputed_output1
opwire -n $_obj_grout_slice_plane_splitByAreaComputed_attribdelete2 -0 $_obj_grout_slice_plane_splitByAreaComputed_output2
opwire -n $_obj_grout_slice_plane_splitByAreaComputed_splitByArea -0 $_obj_grout_slice_plane_splitByAreaComputed_attribdelete1
opwire -n -o 1 $_obj_grout_slice_plane_splitByAreaComputed_splitByArea -0 $_obj_grout_slice_plane_splitByAreaComputed_attribdelete2
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_grout_slice_plane_splitByAreaComputed
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_grout_slice_plane_splitByAreaComputed
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="blast_" label="removeByArea" icon="SOP_blast">
    <helpURL>operator:Sop/blast</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/blast</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('blast'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_testgeometry_pighead1_removeByArea (Sop/blast)
set _obj_testgeometry_pighead1_removeByArea = `run("opadd -e -n -v blast removeByArea")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_testgeometry_pighead1_removeByArea
opspareds '    parm {         name    "group"         baseparm         label   "Group"         export  none         bindselector everything Delete             "Select the geometry to delete and press Enter to complete."             0 1 0xffffffff 0 grouptype 0     }     parm {         name    "grouptype"         baseparm         label   "Group Type"         export  none     }     parm {         name    "computenorms"         baseparm         label   "Recompute Normals"         export  none     }     parm {         name    "negate"         baseparm         label   "Delete Non Selected"         export  all     }     parm {         name    "fillhole"         baseparm         label   "Fill Simple Holes"         export  all     }     parm {         name    "removegrp"         baseparm         label   "Delete Unused Groups"         export  none     }     parm {         name    "threshold"         label   "threshold"         type    float         default { "0" }         range   { 0 10 }     } ' $_obj_testgeometry_pighead1_removeByArea
opparm -V 17.0.416 $_obj_testgeometry_pighead1_removeByArea group ( '@area<`ch("threshold")`' ) grouptype ( prims ) threshold ( 0.001 )
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_testgeometry_pighead1_removeByArea
opexprlanguage -s hscript $_obj_testgeometry_pighead1_removeByArea
opuserdata -n '___Version___' -v '17.0.416' $_obj_testgeometry_pighead1_removeByArea
opset -p on $_obj_testgeometry_pighead1_removeByArea

opcf $arg1
opwire -n $_obj_testgeometry_pighead1_measure1 -0 $_obj_testgeometry_pighead1_removeByArea

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_testgeometry_pighead1_removeByArea
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_testgeometry_pighead1_removeByArea
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>
</shelfDocument>
